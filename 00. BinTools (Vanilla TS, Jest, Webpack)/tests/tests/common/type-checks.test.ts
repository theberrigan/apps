import {
    isNone,
    isArray,
    isFinite,
    isInt,
    isSafeInt,
    isNaN,
    isBigInt,
    isSafeBigInt,
    isNum,
    isAnyNum,
    isAnyInt,
    isByteInt,
    isBool,
    isStr,
    isFn,
    isPlainObject,
    isTypedArray,
    isBinView,
    isArrayBuffer,
    isSharedArrayBuffer,
    isAnyArrayBuffer,
    isAnyBin,
    isByteArray,
    isBytes,
} from '../../../src/main';


test('Test isNone()', () => {
    expect(isNone(undefined)                  ).toBe(true);
    expect(isNone(null)                       ).toBe(true);
    expect(isNone(true)                       ).toBe(false);
    expect(isNone(false)                      ).toBe(false);
    expect(isNone(NaN)                        ).toBe(false);
    expect(isNone(Infinity)                   ).toBe(false);
    expect(isNone(-Infinity)                  ).toBe(false);
    expect(isNone(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isNone(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isNone(0)                          ).toBe(false);
    expect(isNone(0n)                         ).toBe(false);
    expect(isNone(1.0)                        ).toBe(false);
    expect(isNone(1.5)                        ).toBe(false);
    expect(isNone('0')                        ).toBe(false);
    expect(isNone('')                         ).toBe(false);
    expect(isNone({})                         ).toBe(false);
    expect(isNone(Object.create(null))        ).toBe(false);
    expect(isNone([])                         ).toBe(false);
    expect(isNone(Array())                    ).toBe(false);
    expect(isNone(/regex/)                    ).toBe(false);
    expect(isNone(Symbol())                   ).toBe(false);
    expect(isNone(() => {})                   ).toBe(false);
    expect(isNone(function () {})             ).toBe(false);
    expect(isNone(function *() {})            ).toBe(false);
    expect(isNone(class X {})                 ).toBe(false);
    expect(isNone(new (class X {}))           ).toBe(false);
    expect(isNone(new Error('error'))         ).toBe(false);
    expect(isNone(new Set())                  ).toBe(false);
    expect(isNone(new Map())                  ).toBe(false);
    expect(isNone(new Date())                 ).toBe(false);
    expect(isNone(new Uint8Array())           ).toBe(false);
});

test('Test isArray()', () => {
    expect(isArray(undefined)                  ).toBe(false);
    expect(isArray(null)                       ).toBe(false);
    expect(isArray(true)                       ).toBe(false);
    expect(isArray(false)                      ).toBe(false);
    expect(isArray(NaN)                        ).toBe(false);
    expect(isArray(Infinity)                   ).toBe(false);
    expect(isArray(-Infinity)                  ).toBe(false);
    expect(isArray(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isArray(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isArray(0)                          ).toBe(false);
    expect(isArray(0n)                         ).toBe(false);
    expect(isArray(1.0)                        ).toBe(false);
    expect(isArray(1.5)                        ).toBe(false);
    expect(isArray('0')                        ).toBe(false);
    expect(isArray('')                         ).toBe(false);
    expect(isArray({})                         ).toBe(false);
    expect(isArray(Object.create(null))        ).toBe(false);
    expect(isArray([])                         ).toBe(true);
    expect(isArray(Array())                    ).toBe(true);
    expect(isArray(/regex/)                    ).toBe(false);
    expect(isArray(Symbol())                   ).toBe(false);
    expect(isArray(() => {})                   ).toBe(false);
    expect(isArray(function () {})             ).toBe(false);
    expect(isArray(function *() {})            ).toBe(false);
    expect(isArray(class X {})                 ).toBe(false);
    expect(isArray(new (class X {}))           ).toBe(false);
    expect(isArray(new Error('error'))         ).toBe(false);
    expect(isArray(new Set())                  ).toBe(false);
    expect(isArray(new Map())                  ).toBe(false);
    expect(isArray(new Date())                 ).toBe(false);
    expect(isArray(new Uint8Array())           ).toBe(false);
});

test('Test isFinite()', () => {
    expect(isFinite(undefined)                  ).toBe(false);
    expect(isFinite(null)                       ).toBe(false);
    expect(isFinite(true)                       ).toBe(false);
    expect(isFinite(false)                      ).toBe(false);
    expect(isFinite(NaN)                        ).toBe(false);
    expect(isFinite(Infinity)                   ).toBe(false);
    expect(isFinite(-Infinity)                  ).toBe(false);
    expect(isFinite(Number.MIN_SAFE_INTEGER - 1)).toBe(true);
    expect(isFinite(Number.MAX_SAFE_INTEGER + 1)).toBe(true);
    expect(isFinite(0)                          ).toBe(true);
    expect(isFinite(0n)                         ).toBe(false);
    expect(isFinite(1.0)                        ).toBe(true);
    expect(isFinite(1.5)                        ).toBe(true);
    expect(isFinite('0')                        ).toBe(false);
    expect(isFinite('')                         ).toBe(false);
    expect(isFinite({})                         ).toBe(false);
    expect(isFinite(Object.create(null))        ).toBe(false);
    expect(isFinite([])                         ).toBe(false);
    expect(isFinite(Array())                    ).toBe(false);
    expect(isFinite(/regex/)                    ).toBe(false);
    expect(isFinite(Symbol())                   ).toBe(false);
    expect(isFinite(() => {})                   ).toBe(false);
    expect(isFinite(function () {})             ).toBe(false);
    expect(isFinite(function *() {})            ).toBe(false);
    expect(isFinite(class X {})                 ).toBe(false);
    expect(isFinite(new (class X {}))           ).toBe(false);
    expect(isFinite(new Error('error'))         ).toBe(false);
    expect(isFinite(new Set())                  ).toBe(false);
    expect(isFinite(new Map())                  ).toBe(false);
    expect(isFinite(new Date())                 ).toBe(false);
    expect(isFinite(new Uint8Array())           ).toBe(false);
});

test('Test isInt()', () => {
    expect(isInt(undefined)                  ).toBe(false);
    expect(isInt(null)                       ).toBe(false);
    expect(isInt(true)                       ).toBe(false);
    expect(isInt(false)                      ).toBe(false);
    expect(isInt(NaN)                        ).toBe(false);
    expect(isInt(Infinity)                   ).toBe(false);
    expect(isInt(-Infinity)                  ).toBe(false);
    expect(isInt(Number.MIN_SAFE_INTEGER - 1)).toBe(true);
    expect(isInt(Number.MAX_SAFE_INTEGER + 1)).toBe(true);
    expect(isInt(0)                          ).toBe(true);
    expect(isInt(0n)                         ).toBe(false);
    expect(isInt(1.0)                        ).toBe(true);
    expect(isInt(1.5)                        ).toBe(false);
    expect(isInt('0')                        ).toBe(false);
    expect(isInt('')                         ).toBe(false);
    expect(isInt({})                         ).toBe(false);
    expect(isInt(Object.create(null))        ).toBe(false);
    expect(isInt([])                         ).toBe(false);
    expect(isInt(Array())                    ).toBe(false);
    expect(isInt(/regex/)                    ).toBe(false);
    expect(isInt(Symbol())                   ).toBe(false);
    expect(isInt(() => {})                   ).toBe(false);
    expect(isInt(function () {})             ).toBe(false);
    expect(isInt(function *() {})            ).toBe(false);
    expect(isInt(class X {})                 ).toBe(false);
    expect(isInt(new (class X {}))           ).toBe(false);
    expect(isInt(new Error('error'))         ).toBe(false);
    expect(isInt(new Set())                  ).toBe(false);
    expect(isInt(new Map())                  ).toBe(false);
    expect(isInt(new Date())                 ).toBe(false);
    expect(isInt(new Uint8Array())           ).toBe(false);
});

test('Test isSafeInt()', () => {
    expect(isSafeInt(undefined)                  ).toBe(false);
    expect(isSafeInt(null)                       ).toBe(false);
    expect(isSafeInt(true)                       ).toBe(false);
    expect(isSafeInt(false)                      ).toBe(false);
    expect(isSafeInt(NaN)                        ).toBe(false);
    expect(isSafeInt(Infinity)                   ).toBe(false);
    expect(isSafeInt(-Infinity)                  ).toBe(false);
    expect(isSafeInt(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isSafeInt(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isSafeInt(0)                          ).toBe(true);
    expect(isSafeInt(0n)                         ).toBe(false);
    expect(isSafeInt(1.0)                        ).toBe(true);
    expect(isSafeInt(1.5)                        ).toBe(false);
    expect(isSafeInt('0')                        ).toBe(false);
    expect(isSafeInt('')                         ).toBe(false);
    expect(isSafeInt({})                         ).toBe(false);
    expect(isSafeInt(Object.create(null))        ).toBe(false);
    expect(isSafeInt([])                         ).toBe(false);
    expect(isSafeInt(Array())                    ).toBe(false);
    expect(isSafeInt(/regex/)                    ).toBe(false);
    expect(isSafeInt(Symbol())                   ).toBe(false);
    expect(isSafeInt(() => {})                   ).toBe(false);
    expect(isSafeInt(function () {})             ).toBe(false);
    expect(isSafeInt(function *() {})            ).toBe(false);
    expect(isSafeInt(class X {})                 ).toBe(false);
    expect(isSafeInt(new (class X {}))           ).toBe(false);
    expect(isSafeInt(new Error('error'))         ).toBe(false);
    expect(isSafeInt(new Set())                  ).toBe(false);
    expect(isSafeInt(new Map())                  ).toBe(false);
    expect(isSafeInt(new Date())                 ).toBe(false);
    expect(isSafeInt(new Uint8Array())           ).toBe(false);
});

test('Test isNaN()', () => {
    expect(isNaN(undefined)                  ).toBe(false);
    expect(isNaN(null)                       ).toBe(false);
    expect(isNaN(true)                       ).toBe(false);
    expect(isNaN(false)                      ).toBe(false);
    expect(isNaN(NaN)                        ).toBe(true);
    expect(isNaN(Infinity)                   ).toBe(false);
    expect(isNaN(-Infinity)                  ).toBe(false);
    expect(isNaN(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isNaN(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isNaN(0)                          ).toBe(false);
    expect(isNaN(0n)                         ).toBe(false);
    expect(isNaN(1.0)                        ).toBe(false);
    expect(isNaN(1.5)                        ).toBe(false);
    expect(isNaN('0')                        ).toBe(false);
    expect(isNaN('')                         ).toBe(false);
    expect(isNaN({})                         ).toBe(false);
    expect(isNaN(Object.create(null))        ).toBe(false);
    expect(isNaN([])                         ).toBe(false);
    expect(isNaN(Array())                    ).toBe(false);
    expect(isNaN(/regex/)                    ).toBe(false);
    expect(isNaN(Symbol())                   ).toBe(false);
    expect(isNaN(() => {})                   ).toBe(false);
    expect(isNaN(function () {})             ).toBe(false);
    expect(isNaN(function *() {})            ).toBe(false);
    expect(isNaN(class X {})                 ).toBe(false);
    expect(isNaN(new (class X {}))           ).toBe(false);
    expect(isNaN(new Error('error'))         ).toBe(false);
    expect(isNaN(new Set())                  ).toBe(false);
    expect(isNaN(new Map())                  ).toBe(false);
    expect(isNaN(new Date())                 ).toBe(false);
    expect(isNaN(new Uint8Array())           ).toBe(false);
});

test('Test isBigInt()', () => {
    expect(isBigInt(undefined)                  ).toBe(false);
    expect(isBigInt(null)                       ).toBe(false);
    expect(isBigInt(true)                       ).toBe(false);
    expect(isBigInt(false)                      ).toBe(false);
    expect(isBigInt(NaN)                        ).toBe(false);
    expect(isBigInt(Infinity)                   ).toBe(false);
    expect(isBigInt(-Infinity)                  ).toBe(false);
    expect(isBigInt(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isBigInt(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isBigInt(0)                          ).toBe(false);
    expect(isBigInt(0n)                         ).toBe(true);
    expect(isBigInt(1.0)                        ).toBe(false);
    expect(isBigInt(1.5)                        ).toBe(false);
    expect(isBigInt('0')                        ).toBe(false);
    expect(isBigInt('')                         ).toBe(false);
    expect(isBigInt({})                         ).toBe(false);
    expect(isBigInt(Object.create(null))        ).toBe(false);
    expect(isBigInt([])                         ).toBe(false);
    expect(isBigInt(Array())                    ).toBe(false);
    expect(isBigInt(/regex/)                    ).toBe(false);
    expect(isBigInt(Symbol())                   ).toBe(false);
    expect(isBigInt(() => {})                   ).toBe(false);
    expect(isBigInt(function () {})             ).toBe(false);
    expect(isBigInt(function *() {})            ).toBe(false);
    expect(isBigInt(class X {})                 ).toBe(false);
    expect(isBigInt(new (class X {}))           ).toBe(false);
    expect(isBigInt(new Error('error'))         ).toBe(false);
    expect(isBigInt(new Set())                  ).toBe(false);
    expect(isBigInt(new Map())                  ).toBe(false);
    expect(isBigInt(new Date())                 ).toBe(false);
    expect(isBigInt(new Uint8Array())           ).toBe(false);
});

test('Test isSafeBigInt()', () => {
    expect(isSafeBigInt(BigInt(Number.MIN_SAFE_INTEGER - 1))).toBe(false);
    expect(isSafeBigInt(BigInt(Number.MAX_SAFE_INTEGER + 1))).toBe(false);

    expect(isSafeBigInt(undefined)                  ).toBe(false);
    expect(isSafeBigInt(null)                       ).toBe(false);
    expect(isSafeBigInt(true)                       ).toBe(false);
    expect(isSafeBigInt(false)                      ).toBe(false);
    expect(isSafeBigInt(NaN)                        ).toBe(false);
    expect(isSafeBigInt(Infinity)                   ).toBe(false);
    expect(isSafeBigInt(-Infinity)                  ).toBe(false);
    expect(isSafeBigInt(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isSafeBigInt(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isSafeBigInt(0)                          ).toBe(false);
    expect(isSafeBigInt(0n)                         ).toBe(true);
    expect(isSafeBigInt(1.0)                        ).toBe(false);
    expect(isSafeBigInt(1.5)                        ).toBe(false);
    expect(isSafeBigInt('0')                        ).toBe(false);
    expect(isSafeBigInt('')                         ).toBe(false);
    expect(isSafeBigInt({})                         ).toBe(false);
    expect(isSafeBigInt(Object.create(null))        ).toBe(false);
    expect(isSafeBigInt([])                         ).toBe(false);
    expect(isSafeBigInt(Array())                    ).toBe(false);
    expect(isSafeBigInt(/regex/)                    ).toBe(false);
    expect(isSafeBigInt(Symbol())                   ).toBe(false);
    expect(isSafeBigInt(() => {})                   ).toBe(false);
    expect(isSafeBigInt(function () {})             ).toBe(false);
    expect(isSafeBigInt(function *() {})            ).toBe(false);
    expect(isSafeBigInt(class X {})                 ).toBe(false);
    expect(isSafeBigInt(new (class X {}))           ).toBe(false);
    expect(isSafeBigInt(new Error('error'))         ).toBe(false);
    expect(isSafeBigInt(new Set())                  ).toBe(false);
    expect(isSafeBigInt(new Map())                  ).toBe(false);
    expect(isSafeBigInt(new Date())                 ).toBe(false);
    expect(isSafeBigInt(new Uint8Array())           ).toBe(false);
});

test('Test isNum()', () => {
    expect(isNum(undefined)                  ).toBe(false);
    expect(isNum(null)                       ).toBe(false);
    expect(isNum(true)                       ).toBe(false);
    expect(isNum(false)                      ).toBe(false);
    expect(isNum(NaN)                        ).toBe(true);
    expect(isNum(Infinity)                   ).toBe(true);
    expect(isNum(-Infinity)                  ).toBe(true);
    expect(isNum(Number.MIN_SAFE_INTEGER - 1)).toBe(true);
    expect(isNum(Number.MAX_SAFE_INTEGER + 1)).toBe(true);
    expect(isNum(0)                          ).toBe(true);
    expect(isNum(0n)                         ).toBe(false);
    expect(isNum(1.0)                        ).toBe(true);
    expect(isNum(1.5)                        ).toBe(true);
    expect(isNum('0')                        ).toBe(false);
    expect(isNum('')                         ).toBe(false);
    expect(isNum({})                         ).toBe(false);
    expect(isNum(Object.create(null))        ).toBe(false);
    expect(isNum([])                         ).toBe(false);
    expect(isNum(Array())                    ).toBe(false);
    expect(isNum(/regex/)                    ).toBe(false);
    expect(isNum(Symbol())                   ).toBe(false);
    expect(isNum(() => {})                   ).toBe(false);
    expect(isNum(function () {})             ).toBe(false);
    expect(isNum(function *() {})            ).toBe(false);
    expect(isNum(class X {})                 ).toBe(false);
    expect(isNum(new (class X {}))           ).toBe(false);
    expect(isNum(new Error('error'))         ).toBe(false);
    expect(isNum(new Set())                  ).toBe(false);
    expect(isNum(new Map())                  ).toBe(false);
    expect(isNum(new Date())                 ).toBe(false);
    expect(isNum(new Uint8Array())           ).toBe(false);
});

test('Test isAnyNum()', () => {
    expect(isAnyNum(undefined)                  ).toBe(false);
    expect(isAnyNum(null)                       ).toBe(false);
    expect(isAnyNum(true)                       ).toBe(false);
    expect(isAnyNum(false)                      ).toBe(false);
    expect(isAnyNum(NaN)                        ).toBe(true);
    expect(isAnyNum(Infinity)                   ).toBe(true);
    expect(isAnyNum(-Infinity)                  ).toBe(true);
    expect(isAnyNum(Number.MIN_SAFE_INTEGER - 1)).toBe(true);
    expect(isAnyNum(Number.MAX_SAFE_INTEGER + 1)).toBe(true);
    expect(isAnyNum(0)                          ).toBe(true);
    expect(isAnyNum(0n)                         ).toBe(true);
    expect(isAnyNum(1.0)                        ).toBe(true);
    expect(isAnyNum(1.5)                        ).toBe(true);
    expect(isAnyNum('0')                        ).toBe(false);
    expect(isAnyNum('')                         ).toBe(false);
    expect(isAnyNum({})                         ).toBe(false);
    expect(isAnyNum(Object.create(null))        ).toBe(false);
    expect(isAnyNum([])                         ).toBe(false);
    expect(isAnyNum(Array())                    ).toBe(false);
    expect(isAnyNum(/regex/)                    ).toBe(false);
    expect(isAnyNum(Symbol())                   ).toBe(false);
    expect(isAnyNum(() => {})                   ).toBe(false);
    expect(isAnyNum(function () {})             ).toBe(false);
    expect(isAnyNum(function *() {})            ).toBe(false);
    expect(isAnyNum(class X {})                 ).toBe(false);
    expect(isAnyNum(new (class X {}))           ).toBe(false);
    expect(isAnyNum(new Error('error'))         ).toBe(false);
    expect(isAnyNum(new Set())                  ).toBe(false);
    expect(isAnyNum(new Map())                  ).toBe(false);
    expect(isAnyNum(new Date())                 ).toBe(false);
    expect(isAnyNum(new Uint8Array())           ).toBe(false);
});

test('Test isAnyInt()', () => {
    expect(isAnyInt(undefined)                  ).toBe(false);
    expect(isAnyInt(null)                       ).toBe(false);
    expect(isAnyInt(true)                       ).toBe(false);
    expect(isAnyInt(false)                      ).toBe(false);
    expect(isAnyInt(NaN)                        ).toBe(false);
    expect(isAnyInt(Infinity)                   ).toBe(false);
    expect(isAnyInt(-Infinity)                  ).toBe(false);
    expect(isAnyInt(Number.MIN_SAFE_INTEGER - 1)).toBe(true);
    expect(isAnyInt(Number.MAX_SAFE_INTEGER + 1)).toBe(true);
    expect(isAnyInt(0)                          ).toBe(true);
    expect(isAnyInt(0n)                         ).toBe(true);
    expect(isAnyInt(1.0)                        ).toBe(true);
    expect(isAnyInt(1.5)                        ).toBe(false);
    expect(isAnyInt('0')                        ).toBe(false);
    expect(isAnyInt('')                         ).toBe(false);
    expect(isAnyInt({})                         ).toBe(false);
    expect(isAnyInt(Object.create(null))        ).toBe(false);
    expect(isAnyInt([])                         ).toBe(false);
    expect(isAnyInt(Array())                    ).toBe(false);
    expect(isAnyInt(/regex/)                    ).toBe(false);
    expect(isAnyInt(Symbol())                   ).toBe(false);
    expect(isAnyInt(() => {})                   ).toBe(false);
    expect(isAnyInt(function () {})             ).toBe(false);
    expect(isAnyInt(function *() {})            ).toBe(false);
    expect(isAnyInt(class X {})                 ).toBe(false);
    expect(isAnyInt(new (class X {}))           ).toBe(false);
    expect(isAnyInt(new Error('error'))         ).toBe(false);
    expect(isAnyInt(new Set())                  ).toBe(false);
    expect(isAnyInt(new Map())                  ).toBe(false);
    expect(isAnyInt(new Date())                 ).toBe(false);
    expect(isAnyInt(new Uint8Array())           ).toBe(false);
});

test('Test isByteInt()', () => {
    expect(isByteInt(-1)   ).toBe(false);
    expect(isByteInt(0)    ).toBe(true);
    expect(isByteInt(127.5)).toBe(false);
    expect(isByteInt(128n) ).toBe(false);
    expect(isByteInt(255)  ).toBe(true);
    expect(isByteInt(256)  ).toBe(false);

    expect(isByteInt(undefined)                  ).toBe(false);
    expect(isByteInt(null)                       ).toBe(false);
    expect(isByteInt(true)                       ).toBe(false);
    expect(isByteInt(false)                      ).toBe(false);
    expect(isByteInt(NaN)                        ).toBe(false);
    expect(isByteInt(Infinity)                   ).toBe(false);
    expect(isByteInt(-Infinity)                  ).toBe(false);
    expect(isByteInt(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isByteInt(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isByteInt(0)                          ).toBe(true);
    expect(isByteInt(0n)                         ).toBe(false);
    expect(isByteInt(1.0)                        ).toBe(true);
    expect(isByteInt(1.5)                        ).toBe(false);
    expect(isByteInt('0')                        ).toBe(false);
    expect(isByteInt('')                         ).toBe(false);
    expect(isByteInt({})                         ).toBe(false);
    expect(isByteInt(Object.create(null))        ).toBe(false);
    expect(isByteInt([])                         ).toBe(false);
    expect(isByteInt(Array())                    ).toBe(false);
    expect(isByteInt(/regex/)                    ).toBe(false);
    expect(isByteInt(Symbol())                   ).toBe(false);
    expect(isByteInt(() => {})                   ).toBe(false);
    expect(isByteInt(function () {})             ).toBe(false);
    expect(isByteInt(function *() {})            ).toBe(false);
    expect(isByteInt(class X {})                 ).toBe(false);
    expect(isByteInt(new (class X {}))           ).toBe(false);
    expect(isByteInt(new Error('error'))         ).toBe(false);
    expect(isByteInt(new Set())                  ).toBe(false);
    expect(isByteInt(new Map())                  ).toBe(false);
    expect(isByteInt(new Date())                 ).toBe(false);
    expect(isByteInt(new Uint8Array())           ).toBe(false);
});

test('Test isBool()', () => {
    expect(isBool(undefined)                  ).toBe(false);
    expect(isBool(null)                       ).toBe(false);
    expect(isBool(true)                       ).toBe(true);
    expect(isBool(false)                      ).toBe(true);
    expect(isBool(NaN)                        ).toBe(false);
    expect(isBool(Infinity)                   ).toBe(false);
    expect(isBool(-Infinity)                  ).toBe(false);
    expect(isBool(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isBool(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isBool(0)                          ).toBe(false);
    expect(isBool(0n)                         ).toBe(false);
    expect(isBool(1.0)                        ).toBe(false);
    expect(isBool(1.5)                        ).toBe(false);
    expect(isBool('0')                        ).toBe(false);
    expect(isBool('')                         ).toBe(false);
    expect(isBool({})                         ).toBe(false);
    expect(isBool(Object.create(null))        ).toBe(false);
    expect(isBool([])                         ).toBe(false);
    expect(isBool(Array())                    ).toBe(false);
    expect(isBool(/regex/)                    ).toBe(false);
    expect(isBool(Symbol())                   ).toBe(false);
    expect(isBool(() => {})                   ).toBe(false);
    expect(isBool(function () {})             ).toBe(false);
    expect(isBool(function *() {})            ).toBe(false);
    expect(isBool(class X {})                 ).toBe(false);
    expect(isBool(new (class X {}))           ).toBe(false);
    expect(isBool(new Error('error'))         ).toBe(false);
    expect(isBool(new Set())                  ).toBe(false);
    expect(isBool(new Map())                  ).toBe(false);
    expect(isBool(new Date())                 ).toBe(false);
    expect(isBool(new Uint8Array())           ).toBe(false);
});

test('Test isStr()', () => {
    expect(isStr(undefined)                  ).toBe(false);
    expect(isStr(null)                       ).toBe(false);
    expect(isStr(true)                       ).toBe(false);
    expect(isStr(false)                      ).toBe(false);
    expect(isStr(NaN)                        ).toBe(false);
    expect(isStr(Infinity)                   ).toBe(false);
    expect(isStr(-Infinity)                  ).toBe(false);
    expect(isStr(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isStr(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isStr(0)                          ).toBe(false);
    expect(isStr(0n)                         ).toBe(false);
    expect(isStr(1.0)                        ).toBe(false);
    expect(isStr(1.5)                        ).toBe(false);
    expect(isStr('0')                        ).toBe(true);
    expect(isStr('')                         ).toBe(true);
    expect(isStr({})                         ).toBe(false);
    expect(isStr(Object.create(null))        ).toBe(false);
    expect(isStr([])                         ).toBe(false);
    expect(isStr(Array())                    ).toBe(false);
    expect(isStr(/regex/)                    ).toBe(false);
    expect(isStr(Symbol())                   ).toBe(false);
    expect(isStr(() => {})                   ).toBe(false);
    expect(isStr(function () {})             ).toBe(false);
    expect(isStr(function *() {})            ).toBe(false);
    expect(isStr(class X {})                 ).toBe(false);
    expect(isStr(new (class X {}))           ).toBe(false);
    expect(isStr(new Error('error'))         ).toBe(false);
    expect(isStr(new Set())                  ).toBe(false);
    expect(isStr(new Map())                  ).toBe(false);
    expect(isStr(new Date())                 ).toBe(false);
    expect(isStr(new Uint8Array())           ).toBe(false);
});

test('Test isFn()', () => {
    expect(isFn(undefined)                  ).toBe(false);
    expect(isFn(null)                       ).toBe(false);
    expect(isFn(true)                       ).toBe(false);
    expect(isFn(false)                      ).toBe(false);
    expect(isFn(NaN)                        ).toBe(false);
    expect(isFn(Infinity)                   ).toBe(false);
    expect(isFn(-Infinity)                  ).toBe(false);
    expect(isFn(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isFn(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isFn(0)                          ).toBe(false);
    expect(isFn(0n)                         ).toBe(false);
    expect(isFn(1.0)                        ).toBe(false);
    expect(isFn(1.5)                        ).toBe(false);
    expect(isFn('0')                        ).toBe(false);
    expect(isFn('')                         ).toBe(false);
    expect(isFn({})                         ).toBe(false);
    expect(isFn(Object.create(null))        ).toBe(false);
    expect(isFn([])                         ).toBe(false);
    expect(isFn(Array())                    ).toBe(false);
    expect(isFn(/regex/)                    ).toBe(false);
    expect(isFn(Symbol())                   ).toBe(false);
    expect(isFn(() => {})                   ).toBe(true);
    expect(isFn(function () {})             ).toBe(true);
    expect(isFn(function *() {})            ).toBe(true);
    expect(isFn(class X {})                 ).toBe(true);
    expect(isFn(new (class X {}))           ).toBe(false);
    expect(isFn(new Error('error'))         ).toBe(false);
    expect(isFn(new Set())                  ).toBe(false);
    expect(isFn(new Map())                  ).toBe(false);
    expect(isFn(new Date())                 ).toBe(false);
    expect(isFn(new Uint8Array())           ).toBe(false);
});

test('Test isPlainObject()', () => {
    expect(isPlainObject(undefined)                  ).toBe(false);
    expect(isPlainObject(null)                       ).toBe(false);
    expect(isPlainObject(true)                       ).toBe(false);
    expect(isPlainObject(false)                      ).toBe(false);
    expect(isPlainObject(NaN)                        ).toBe(false);
    expect(isPlainObject(Infinity)                   ).toBe(false);
    expect(isPlainObject(-Infinity)                  ).toBe(false);
    expect(isPlainObject(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isPlainObject(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isPlainObject(0)                          ).toBe(false);
    expect(isPlainObject(0n)                         ).toBe(false);
    expect(isPlainObject(1.0)                        ).toBe(false);
    expect(isPlainObject(1.5)                        ).toBe(false);
    expect(isPlainObject('0')                        ).toBe(false);
    expect(isPlainObject('')                         ).toBe(false);
    expect(isPlainObject({})                         ).toBe(true);
    expect(isPlainObject(Object.create(null))        ).toBe(false);
    expect(isPlainObject([])                         ).toBe(false);
    expect(isPlainObject(Array())                    ).toBe(false);
    expect(isPlainObject(/regex/)                    ).toBe(false);
    expect(isPlainObject(Symbol())                   ).toBe(false);
    expect(isPlainObject(() => {})                   ).toBe(false);
    expect(isPlainObject(function () {})             ).toBe(false);
    expect(isPlainObject(function *() {})            ).toBe(false);
    expect(isPlainObject(class X {})                 ).toBe(false);
    expect(isPlainObject(new (class X {}))           ).toBe(false);
    expect(isPlainObject(new Error('error'))         ).toBe(false);
    expect(isPlainObject(new Set())                  ).toBe(false);
    expect(isPlainObject(new Map())                  ).toBe(false);
    expect(isPlainObject(new Date())                 ).toBe(false);
    expect(isPlainObject(new Uint8Array())           ).toBe(false);
});

test('Test isTypedArray()', () => {
    expect(isTypedArray(undefined)                  ).toBe(false);
    expect(isTypedArray(null)                       ).toBe(false);
    expect(isTypedArray(true)                       ).toBe(false);
    expect(isTypedArray(false)                      ).toBe(false);
    expect(isTypedArray(NaN)                        ).toBe(false);
    expect(isTypedArray(Infinity)                   ).toBe(false);
    expect(isTypedArray(-Infinity)                  ).toBe(false);
    expect(isTypedArray(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isTypedArray(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isTypedArray(0)                          ).toBe(false);
    expect(isTypedArray(0n)                         ).toBe(false);
    expect(isTypedArray(1.0)                        ).toBe(false);
    expect(isTypedArray(1.5)                        ).toBe(false);
    expect(isTypedArray('0')                        ).toBe(false);
    expect(isTypedArray('')                         ).toBe(false);
    expect(isTypedArray({})                         ).toBe(false);
    expect(isTypedArray(Object.create(null))        ).toBe(false);
    expect(isTypedArray([])                         ).toBe(false);
    expect(isTypedArray(Array())                    ).toBe(false);
    expect(isTypedArray(/regex/)                    ).toBe(false);
    expect(isTypedArray(Symbol())                   ).toBe(false);
    expect(isTypedArray(() => {})                   ).toBe(false);
    expect(isTypedArray(function () {})             ).toBe(false);
    expect(isTypedArray(function *() {})            ).toBe(false);
    expect(isTypedArray(class X {})                 ).toBe(false);
    expect(isTypedArray(new (class X {}))           ).toBe(false);
    expect(isTypedArray(new Error('error'))         ).toBe(false);
    expect(isTypedArray(new Set())                  ).toBe(false);
    expect(isTypedArray(new Map())                  ).toBe(false);
    expect(isTypedArray(new Date())                 ).toBe(false);
    expect(isTypedArray(new Uint8Array())           ).toBe(true);
});

test('Test isBinView()', () => {
    expect(isBinView(new DataView(new ArrayBuffer()))).toBe(true);
    expect(isBinView(new Int8Array())     ).toBe(true);
    expect(isBinView(new Uint8Array())    ).toBe(true);
    expect(isBinView(new Int16Array())    ).toBe(true);
    expect(isBinView(new Uint16Array())   ).toBe(true);
    expect(isBinView(new Int32Array())    ).toBe(true);
    expect(isBinView(new Uint32Array())   ).toBe(true);
    expect(isBinView(new Int32Array())    ).toBe(true);
    expect(isBinView(new Uint32Array())   ).toBe(true);
    expect(isBinView(new BigInt64Array()) ).toBe(true);
    expect(isBinView(new BigUint64Array())).toBe(true);
    expect(isBinView(new Float32Array())  ).toBe(true);
    expect(isBinView(new Float64Array())  ).toBe(true);

    expect(isBinView(undefined)                  ).toBe(false);
    expect(isBinView(null)                       ).toBe(false);
    expect(isBinView(true)                       ).toBe(false);
    expect(isBinView(false)                      ).toBe(false);
    expect(isBinView(NaN)                        ).toBe(false);
    expect(isBinView(Infinity)                   ).toBe(false);
    expect(isBinView(-Infinity)                  ).toBe(false);
    expect(isBinView(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isBinView(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isBinView(0)                          ).toBe(false);
    expect(isBinView(0n)                         ).toBe(false);
    expect(isBinView(1.0)                        ).toBe(false);
    expect(isBinView(1.5)                        ).toBe(false);
    expect(isBinView('0')                        ).toBe(false);
    expect(isBinView('')                         ).toBe(false);
    expect(isBinView({})                         ).toBe(false);
    expect(isBinView(Object.create(null))        ).toBe(false);
    expect(isBinView([])                         ).toBe(false);
    expect(isBinView(Array())                    ).toBe(false);
    expect(isBinView(/regex/)                    ).toBe(false);
    expect(isBinView(Symbol())                   ).toBe(false);
    expect(isBinView(() => {})                   ).toBe(false);
    expect(isBinView(function () {})             ).toBe(false);
    expect(isBinView(function *() {})            ).toBe(false);
    expect(isBinView(class X {})                 ).toBe(false);
    expect(isBinView(new (class X {}))           ).toBe(false);
    expect(isBinView(new Error('error'))         ).toBe(false);
    expect(isBinView(new Set())                  ).toBe(false);
    expect(isBinView(new Map())                  ).toBe(false);
    expect(isBinView(new Date())                 ).toBe(false);
    expect(isBinView(new Uint8Array())           ).toBe(true);
});

test('Test isArrayBuffer()', () => {
    expect(isArrayBuffer(new ArrayBuffer())      ).toBe(true);
    expect(isArrayBuffer(new SharedArrayBuffer())).toBe(false);

    expect(isArrayBuffer(undefined)                  ).toBe(false);
    expect(isArrayBuffer(null)                       ).toBe(false);
    expect(isArrayBuffer(true)                       ).toBe(false);
    expect(isArrayBuffer(false)                      ).toBe(false);
    expect(isArrayBuffer(NaN)                        ).toBe(false);
    expect(isArrayBuffer(Infinity)                   ).toBe(false);
    expect(isArrayBuffer(-Infinity)                  ).toBe(false);
    expect(isArrayBuffer(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isArrayBuffer(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isArrayBuffer(0)                          ).toBe(false);
    expect(isArrayBuffer(0n)                         ).toBe(false);
    expect(isArrayBuffer(1.0)                        ).toBe(false);
    expect(isArrayBuffer(1.5)                        ).toBe(false);
    expect(isArrayBuffer('0')                        ).toBe(false);
    expect(isArrayBuffer('')                         ).toBe(false);
    expect(isArrayBuffer({})                         ).toBe(false);
    expect(isArrayBuffer(Object.create(null))        ).toBe(false);
    expect(isArrayBuffer([])                         ).toBe(false);
    expect(isArrayBuffer(Array())                    ).toBe(false);
    expect(isArrayBuffer(/regex/)                    ).toBe(false);
    expect(isArrayBuffer(Symbol())                   ).toBe(false);
    expect(isArrayBuffer(() => {})                   ).toBe(false);
    expect(isArrayBuffer(function () {})             ).toBe(false);
    expect(isArrayBuffer(function *() {})            ).toBe(false);
    expect(isArrayBuffer(class X {})                 ).toBe(false);
    expect(isArrayBuffer(new (class X {}))           ).toBe(false);
    expect(isArrayBuffer(new Error('error'))         ).toBe(false);
    expect(isArrayBuffer(new Set())                  ).toBe(false);
    expect(isArrayBuffer(new Map())                  ).toBe(false);
    expect(isArrayBuffer(new Date())                 ).toBe(false);
    expect(isArrayBuffer(new Uint8Array())           ).toBe(false);
});

test('Test isSharedArrayBuffer()', () => {
    expect(isSharedArrayBuffer(new ArrayBuffer())      ).toBe(false);
    expect(isSharedArrayBuffer(new SharedArrayBuffer())).toBe(true);

    expect(isSharedArrayBuffer(undefined)                  ).toBe(false);
    expect(isSharedArrayBuffer(null)                       ).toBe(false);
    expect(isSharedArrayBuffer(true)                       ).toBe(false);
    expect(isSharedArrayBuffer(false)                      ).toBe(false);
    expect(isSharedArrayBuffer(NaN)                        ).toBe(false);
    expect(isSharedArrayBuffer(Infinity)                   ).toBe(false);
    expect(isSharedArrayBuffer(-Infinity)                  ).toBe(false);
    expect(isSharedArrayBuffer(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isSharedArrayBuffer(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isSharedArrayBuffer(0)                          ).toBe(false);
    expect(isSharedArrayBuffer(0n)                         ).toBe(false);
    expect(isSharedArrayBuffer(1.0)                        ).toBe(false);
    expect(isSharedArrayBuffer(1.5)                        ).toBe(false);
    expect(isSharedArrayBuffer('0')                        ).toBe(false);
    expect(isSharedArrayBuffer('')                         ).toBe(false);
    expect(isSharedArrayBuffer({})                         ).toBe(false);
    expect(isSharedArrayBuffer(Object.create(null))        ).toBe(false);
    expect(isSharedArrayBuffer([])                         ).toBe(false);
    expect(isSharedArrayBuffer(Array())                    ).toBe(false);
    expect(isSharedArrayBuffer(/regex/)                    ).toBe(false);
    expect(isSharedArrayBuffer(Symbol())                   ).toBe(false);
    expect(isSharedArrayBuffer(() => {})                   ).toBe(false);
    expect(isSharedArrayBuffer(function () {})             ).toBe(false);
    expect(isSharedArrayBuffer(function *() {})            ).toBe(false);
    expect(isSharedArrayBuffer(class X {})                 ).toBe(false);
    expect(isSharedArrayBuffer(new (class X {}))           ).toBe(false);
    expect(isSharedArrayBuffer(new Error('error'))         ).toBe(false);
    expect(isSharedArrayBuffer(new Set())                  ).toBe(false);
    expect(isSharedArrayBuffer(new Map())                  ).toBe(false);
    expect(isSharedArrayBuffer(new Date())                 ).toBe(false);
    expect(isSharedArrayBuffer(new Uint8Array())           ).toBe(false);
});

test('Test isAnyArrayBuffer()', () => {
    expect(isAnyArrayBuffer(new ArrayBuffer())              ).toBe(true);
    expect(isAnyArrayBuffer(new SharedArrayBuffer())        ).toBe(true);
    expect(isAnyArrayBuffer(new DataView(new ArrayBuffer()))).toBe(false);
    expect(isAnyArrayBuffer(new Int8Array())                ).toBe(false);
    expect(isAnyArrayBuffer(new Uint8Array())               ).toBe(false);
    expect(isAnyArrayBuffer(new Uint8ClampedArray())        ).toBe(false);
    expect(isAnyArrayBuffer(new Int16Array())               ).toBe(false);
    expect(isAnyArrayBuffer(new Uint16Array())              ).toBe(false);
    expect(isAnyArrayBuffer(new Int32Array())               ).toBe(false);
    expect(isAnyArrayBuffer(new Uint32Array())              ).toBe(false);
    expect(isAnyArrayBuffer(new Int32Array())               ).toBe(false);
    expect(isAnyArrayBuffer(new Uint32Array())              ).toBe(false);
    expect(isAnyArrayBuffer(new BigInt64Array())            ).toBe(false);
    expect(isAnyArrayBuffer(new BigUint64Array())           ).toBe(false);
    expect(isAnyArrayBuffer(new Float32Array())             ).toBe(false);
    expect(isAnyArrayBuffer(new Float64Array())             ).toBe(false);
    expect(isAnyArrayBuffer(Buffer.alloc(1))                ).toBe(false);  // Node Buffer

    expect(isAnyArrayBuffer(undefined)                  ).toBe(false);
    expect(isAnyArrayBuffer(null)                       ).toBe(false);
    expect(isAnyArrayBuffer(true)                       ).toBe(false);
    expect(isAnyArrayBuffer(false)                      ).toBe(false);
    expect(isAnyArrayBuffer(NaN)                        ).toBe(false);
    expect(isAnyArrayBuffer(Infinity)                   ).toBe(false);
    expect(isAnyArrayBuffer(-Infinity)                  ).toBe(false);
    expect(isAnyArrayBuffer(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isAnyArrayBuffer(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isAnyArrayBuffer(0)                          ).toBe(false);
    expect(isAnyArrayBuffer(0n)                         ).toBe(false);
    expect(isAnyArrayBuffer(1.0)                        ).toBe(false);
    expect(isAnyArrayBuffer(1.5)                        ).toBe(false);
    expect(isAnyArrayBuffer('0')                        ).toBe(false);
    expect(isAnyArrayBuffer('')                         ).toBe(false);
    expect(isAnyArrayBuffer({})                         ).toBe(false);
    expect(isAnyArrayBuffer(Object.create(null))        ).toBe(false);
    expect(isAnyArrayBuffer([])                         ).toBe(false);
    expect(isAnyArrayBuffer(Array())                    ).toBe(false);
    expect(isAnyArrayBuffer(/regex/)                    ).toBe(false);
    expect(isAnyArrayBuffer(Symbol())                   ).toBe(false);
    expect(isAnyArrayBuffer(() => {})                   ).toBe(false);
    expect(isAnyArrayBuffer(function () {})             ).toBe(false);
    expect(isAnyArrayBuffer(function *() {})            ).toBe(false);
    expect(isAnyArrayBuffer(class X {})                 ).toBe(false);
    expect(isAnyArrayBuffer(new (class X {}))           ).toBe(false);
    expect(isAnyArrayBuffer(new Error('error'))         ).toBe(false);
    expect(isAnyArrayBuffer(new Set())                  ).toBe(false);
    expect(isAnyArrayBuffer(new Map())                  ).toBe(false);
    expect(isAnyArrayBuffer(new Date())                 ).toBe(false);
    expect(isAnyArrayBuffer(new Uint8Array())           ).toBe(false);
});

test('Test isAnyBin()', () => {
    expect(isAnyBin(new DataView(new ArrayBuffer()))).toBe(true);
    expect(isAnyBin(new ArrayBuffer())              ).toBe(true);
    expect(isAnyBin(new SharedArrayBuffer())        ).toBe(true);
    expect(isAnyBin(new Int8Array())                ).toBe(true);
    expect(isAnyBin(new Uint8Array())               ).toBe(true);
    expect(isAnyBin(new Uint8ClampedArray())        ).toBe(true);
    expect(isAnyBin(new Int16Array())               ).toBe(true);
    expect(isAnyBin(new Uint16Array())              ).toBe(true);
    expect(isAnyBin(new Int32Array())               ).toBe(true);
    expect(isAnyBin(new Uint32Array())              ).toBe(true);
    expect(isAnyBin(new Int32Array())               ).toBe(true);
    expect(isAnyBin(new Uint32Array())              ).toBe(true);
    expect(isAnyBin(new BigInt64Array())            ).toBe(true);
    expect(isAnyBin(new BigUint64Array())           ).toBe(true);
    expect(isAnyBin(new Float32Array())             ).toBe(true);
    expect(isAnyBin(new Float64Array())             ).toBe(true);
    expect(isAnyBin(Buffer.alloc(1))                ).toBe(true);  // Node Buffer

    expect(isAnyBin(undefined)                  ).toBe(false);
    expect(isAnyBin(null)                       ).toBe(false);
    expect(isAnyBin(true)                       ).toBe(false);
    expect(isAnyBin(false)                      ).toBe(false);
    expect(isAnyBin(NaN)                        ).toBe(false);
    expect(isAnyBin(Infinity)                   ).toBe(false);
    expect(isAnyBin(-Infinity)                  ).toBe(false);
    expect(isAnyBin(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isAnyBin(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isAnyBin(0)                          ).toBe(false);
    expect(isAnyBin(0n)                         ).toBe(false);
    expect(isAnyBin(1.0)                        ).toBe(false);
    expect(isAnyBin(1.5)                        ).toBe(false);
    expect(isAnyBin('0')                        ).toBe(false);
    expect(isAnyBin('')                         ).toBe(false);
    expect(isAnyBin({})                         ).toBe(false);
    expect(isAnyBin(Object.create(null))        ).toBe(false);
    expect(isAnyBin([])                         ).toBe(false);
    expect(isAnyBin(Array())                    ).toBe(false);
    expect(isAnyBin(/regex/)                    ).toBe(false);
    expect(isAnyBin(Symbol())                   ).toBe(false);
    expect(isAnyBin(() => {})                   ).toBe(false);
    expect(isAnyBin(function () {})             ).toBe(false);
    expect(isAnyBin(function *() {})            ).toBe(false);
    expect(isAnyBin(class X {})                 ).toBe(false);
    expect(isAnyBin(new (class X {}))           ).toBe(false);
    expect(isAnyBin(new Error('error'))         ).toBe(false);
    expect(isAnyBin(new Set())                  ).toBe(false);
    expect(isAnyBin(new Map())                  ).toBe(false);
    expect(isAnyBin(new Date())                 ).toBe(false);
    expect(isAnyBin(new Uint8Array())           ).toBe(true);
});

test('Test isByteArray()', () => {
    expect(isByteArray(new DataView(new ArrayBuffer()))).toBe(false);
    expect(isByteArray(new ArrayBuffer())              ).toBe(false);
    expect(isByteArray(new SharedArrayBuffer())        ).toBe(false);
    expect(isByteArray(new Int8Array())                ).toBe(false);
    expect(isByteArray(new Uint8Array())               ).toBe(false);
    expect(isByteArray(new Uint8ClampedArray())        ).toBe(false);
    expect(isByteArray(new Int16Array())               ).toBe(false);
    expect(isByteArray(new Uint16Array())              ).toBe(false);
    expect(isByteArray(new Int32Array())               ).toBe(false);
    expect(isByteArray(new Uint32Array())              ).toBe(false);
    expect(isByteArray(new Int32Array())               ).toBe(false);
    expect(isByteArray(new Uint32Array())              ).toBe(false);
    expect(isByteArray(new BigInt64Array())            ).toBe(false);
    expect(isByteArray(new BigUint64Array())           ).toBe(false);
    expect(isByteArray(new Float32Array())             ).toBe(false);
    expect(isByteArray(new Float64Array())             ).toBe(false);
    expect(isByteArray(Buffer.alloc(1))                ).toBe(false);  // Node Buffer

    expect(isByteArray(undefined)                  ).toBe(false);
    expect(isByteArray(null)                       ).toBe(false);
    expect(isByteArray(true)                       ).toBe(false);
    expect(isByteArray(false)                      ).toBe(false);
    expect(isByteArray(NaN)                        ).toBe(false);
    expect(isByteArray(Infinity)                   ).toBe(false);
    expect(isByteArray(-Infinity)                  ).toBe(false);
    expect(isByteArray(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isByteArray(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isByteArray(0)                          ).toBe(false);
    expect(isByteArray(0n)                         ).toBe(false);
    expect(isByteArray(1.0)                        ).toBe(false);
    expect(isByteArray(1.5)                        ).toBe(false);
    expect(isByteArray('0')                        ).toBe(false);
    expect(isByteArray('')                         ).toBe(false);
    expect(isByteArray({})                         ).toBe(false);
    expect(isByteArray(Object.create(null))        ).toBe(false);
    expect(isByteArray([])                         ).toBe(true);
    expect(isByteArray(Array())                    ).toBe(true);
    expect(isByteArray(/regex/)                    ).toBe(false);
    expect(isByteArray(Symbol())                   ).toBe(false);
    expect(isByteArray(() => {})                   ).toBe(false);
    expect(isByteArray(function () {})             ).toBe(false);
    expect(isByteArray(function *() {})            ).toBe(false);
    expect(isByteArray(class X {})                 ).toBe(false);
    expect(isByteArray(new (class X {}))           ).toBe(false);
    expect(isByteArray(new Error('error'))         ).toBe(false);
    expect(isByteArray(new Set())                  ).toBe(false);
    expect(isByteArray(new Map())                  ).toBe(false);
    expect(isByteArray(new Date())                 ).toBe(false);
    expect(isByteArray(new Uint8Array([ 1, 2, 3 ]))).toBe(false);
    expect(isByteArray([ 0, 1, 2, 3, 255 ])        ).toBe(true);
    expect(isByteArray([ -1, 1, 2, 3 ])            ).toBe(false);
    expect(isByteArray([ 0, 1, 2, 3, 256 ])        ).toBe(false);
});

test('Test isBytes()', () => {
    expect(isBytes(new DataView(new ArrayBuffer()))).toBe(false);
    expect(isBytes(new ArrayBuffer())              ).toBe(false);
    expect(isBytes(new SharedArrayBuffer())        ).toBe(false);
    expect(isBytes(new Int8Array())                ).toBe(false);
    expect(isBytes(new Uint8Array())               ).toBe(true);
    expect(isBytes(new Uint8ClampedArray())        ).toBe(true);
    expect(isBytes(new Int16Array())               ).toBe(false);
    expect(isBytes(new Uint16Array())              ).toBe(false);
    expect(isBytes(new Int32Array())               ).toBe(false);
    expect(isBytes(new Uint32Array())              ).toBe(false);
    expect(isBytes(new Int32Array())               ).toBe(false);
    expect(isBytes(new Uint32Array())              ).toBe(false);
    expect(isBytes(new BigInt64Array())            ).toBe(false);
    expect(isBytes(new BigUint64Array())           ).toBe(false);
    expect(isBytes(new Float32Array())             ).toBe(false);
    expect(isBytes(new Float64Array())             ).toBe(false);
    expect(isBytes(Buffer.alloc(1))                ).toBe(true);  // Node Buffer

    expect(isBytes(undefined)                  ).toBe(false);
    expect(isBytes(null)                       ).toBe(false);
    expect(isBytes(true)                       ).toBe(false);
    expect(isBytes(false)                      ).toBe(false);
    expect(isBytes(NaN)                        ).toBe(false);
    expect(isBytes(Infinity)                   ).toBe(false);
    expect(isBytes(-Infinity)                  ).toBe(false);
    expect(isBytes(Number.MIN_SAFE_INTEGER - 1)).toBe(false);
    expect(isBytes(Number.MAX_SAFE_INTEGER + 1)).toBe(false);
    expect(isBytes(0)                          ).toBe(false);
    expect(isBytes(0n)                         ).toBe(false);
    expect(isBytes(1.0)                        ).toBe(false);
    expect(isBytes(1.5)                        ).toBe(false);
    expect(isBytes('0')                        ).toBe(false);
    expect(isBytes('')                         ).toBe(false);
    expect(isBytes({})                         ).toBe(false);
    expect(isBytes(Object.create(null))        ).toBe(false);
    expect(isBytes([])                         ).toBe(false);
    expect(isBytes(Array())                    ).toBe(false);
    expect(isBytes(/regex/)                    ).toBe(false);
    expect(isBytes(Symbol())                   ).toBe(false);
    expect(isBytes(() => {})                   ).toBe(false);
    expect(isBytes(function () {})             ).toBe(false);
    expect(isBytes(function *() {})            ).toBe(false);
    expect(isBytes(class X {})                 ).toBe(false);
    expect(isBytes(new (class X {}))           ).toBe(false);
    expect(isBytes(new Error('error'))         ).toBe(false);
    expect(isBytes(new Set())                  ).toBe(false);
    expect(isBytes(new Map())                  ).toBe(false);
    expect(isBytes(new Date())                 ).toBe(false);
    expect(isBytes(new Uint8Array([ 1, 2, 3 ]))).toBe(true);
    expect(isBytes([ 0, 1, 2, 3, 255 ])        ).toBe(false);
    expect(isBytes([ -1, 1, 2, 3 ])            ).toBe(false);
    expect(isBytes([ 0, 1, 2, 3, 256 ])        ).toBe(false);
});
