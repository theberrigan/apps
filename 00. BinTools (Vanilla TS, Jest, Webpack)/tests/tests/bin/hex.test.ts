import {
    isHex,
    hexToBin,
    binToHex,
    numToHex,
    bigIntToHex,
    hexToBigInt
} from '../../../src/main';


test('Test isHex()', () => {
    expect(isHex(' \r\t\n')).toBe(true);
    expect(isHex(' \r\t\n', true)).toBe(false);
    expect(isHex(' 1 2 3 4 5 6 7 8 9 A bC DE f 0\t')).toBe(true);
    expect(isHex(' 1 2 3 4 5 6 7 8 9 A bC DE f 0\t', true)).toBe(true);
});

test('Test hexToBin()', () => {
    expect(hexToBin(' 1 2 3 4 DE Ad be eF \t')).toEqual(new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]));
    expect(() => hexToBin(' 12 34 DE Ad be eF 1')).toThrow(/Expected type of argument 'hex' is string/);
});

test('Test binToHex()', () => {
    expect(binToHex(new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]))).toEqual('1234deadbeef');
    expect(binToHex(new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]), false)).toEqual('1234deadbeef');
    expect(binToHex(new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]), true)).toEqual('1234DEADBEEF');
    expect(binToHex(new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]), false, ' ')).toEqual('12 34 de ad be ef');
    expect(binToHex(new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]), true, ' ')).toEqual('12 34 DE AD BE EF');
    expect(binToHex([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ], true, ' ')).toEqual('12 34 DE AD BE EF');
    expect(() => binToHex(<any>[ 'str' ])).toThrow(/Expected type of argument 'source' is/);
});

test('Test binToHex() -> hexToBin()', () => {
    const u8a = new Uint8Array([ 0x12, 0x34, 0xDE, 0xAD, 0xBE, 0xEF ]);

    expect(hexToBin(binToHex(u8a, true, ' '))).toEqual(u8a);
});

test('Test numToHex()', () => {
    expect(numToHex(0, false, -1, false, '')).toEqual('0');
    expect(numToHex(0, false, -1, false, '0x')).toEqual('0');
    expect(numToHex(0, false, -1, true, '')).toEqual('0');
    expect(numToHex(0, false, -1, true, '0x')).toEqual('0x0');
    expect(numToHex(0, false, 0, false, '')).toEqual('00');
    expect(numToHex(0, false, 0, false, '0x')).toEqual('00');
    expect(numToHex(0, false, 0, true, '')).toEqual('00');
    expect(numToHex(0, false, 0, true, '0x')).toEqual('0x00');
    expect(numToHex(0, false, 1, false, '')).toEqual('00');
    expect(numToHex(0, false, 1, false, '0x')).toEqual('00');
    expect(numToHex(0, false, 1, true, '')).toEqual('00');
    expect(numToHex(0, false, 1, true, '0x')).toEqual('0x00');
    expect(numToHex(0, false, 2, false, '')).toEqual('0000');
    expect(numToHex(0, false, 2, false, '0x')).toEqual('0000');
    expect(numToHex(0, false, 2, true, '')).toEqual('0000');
    expect(numToHex(0, false, 2, true, '0x')).toEqual('0x0000');
    expect(numToHex(0, false, 4, false, '')).toEqual('00000000');
    expect(numToHex(0, false, 4, false, '0x')).toEqual('00000000');
    expect(numToHex(0, false, 4, true, '')).toEqual('00000000');
    expect(numToHex(0, false, 4, true, '0x')).toEqual('0x00000000');
    expect(numToHex(0, false, 8, false, '')).toEqual('0000000000000000');
    expect(numToHex(0, false, 8, false, '0x')).toEqual('0000000000000000');
    expect(numToHex(0, false, 8, true, '')).toEqual('0000000000000000');
    expect(numToHex(0, false, 8, true, '0x')).toEqual('0x0000000000000000');
    expect(numToHex(0, true, -1, false, '')).toEqual('0');
    expect(numToHex(0, true, -1, false, '0x')).toEqual('0');
    expect(numToHex(0, true, -1, true, '')).toEqual('0');
    expect(numToHex(0, true, -1, true, '0x')).toEqual('0x0');
    expect(numToHex(0, true, 0, false, '')).toEqual('00');
    expect(numToHex(0, true, 0, false, '0x')).toEqual('00');
    expect(numToHex(0, true, 0, true, '')).toEqual('00');
    expect(numToHex(0, true, 0, true, '0x')).toEqual('0x00');
    expect(numToHex(0, true, 1, false, '')).toEqual('00');
    expect(numToHex(0, true, 1, false, '0x')).toEqual('00');
    expect(numToHex(0, true, 1, true, '')).toEqual('00');
    expect(numToHex(0, true, 1, true, '0x')).toEqual('0x00');
    expect(numToHex(0, true, 2, false, '')).toEqual('0000');
    expect(numToHex(0, true, 2, false, '0x')).toEqual('0000');
    expect(numToHex(0, true, 2, true, '')).toEqual('0000');
    expect(numToHex(0, true, 2, true, '0x')).toEqual('0x0000');
    expect(numToHex(0, true, 4, false, '')).toEqual('00000000');
    expect(numToHex(0, true, 4, false, '0x')).toEqual('00000000');
    expect(numToHex(0, true, 4, true, '')).toEqual('00000000');
    expect(numToHex(0, true, 4, true, '0x')).toEqual('0x00000000');
    expect(numToHex(0, true, 8, false, '')).toEqual('0000000000000000');
    expect(numToHex(0, true, 8, false, '0x')).toEqual('0000000000000000');
    expect(numToHex(0, true, 8, true, '')).toEqual('0000000000000000');
    expect(numToHex(0, true, 8, true, '0x')).toEqual('0x0000000000000000');
    expect(numToHex(1, false, -1, false, '')).toEqual('1');
    expect(numToHex(1, false, -1, false, '0x')).toEqual('1');
    expect(numToHex(1, false, -1, true, '')).toEqual('1');
    expect(numToHex(1, false, -1, true, '0x')).toEqual('0x1');
    expect(numToHex(1, false, 0, false, '')).toEqual('01');
    expect(numToHex(1, false, 0, false, '0x')).toEqual('01');
    expect(numToHex(1, false, 0, true, '')).toEqual('01');
    expect(numToHex(1, false, 0, true, '0x')).toEqual('0x01');
    expect(numToHex(1, false, 1, false, '')).toEqual('01');
    expect(numToHex(1, false, 1, false, '0x')).toEqual('01');
    expect(numToHex(1, false, 1, true, '')).toEqual('01');
    expect(numToHex(1, false, 1, true, '0x')).toEqual('0x01');
    expect(numToHex(1, false, 2, false, '')).toEqual('0001');
    expect(numToHex(1, false, 2, false, '0x')).toEqual('0001');
    expect(numToHex(1, false, 2, true, '')).toEqual('0001');
    expect(numToHex(1, false, 2, true, '0x')).toEqual('0x0001');
    expect(numToHex(1, false, 4, false, '')).toEqual('00000001');
    expect(numToHex(1, false, 4, false, '0x')).toEqual('00000001');
    expect(numToHex(1, false, 4, true, '')).toEqual('00000001');
    expect(numToHex(1, false, 4, true, '0x')).toEqual('0x00000001');
    expect(numToHex(1, false, 8, false, '')).toEqual('0000000000000001');
    expect(numToHex(1, false, 8, false, '0x')).toEqual('0000000000000001');
    expect(numToHex(1, false, 8, true, '')).toEqual('0000000000000001');
    expect(numToHex(1, false, 8, true, '0x')).toEqual('0x0000000000000001');
    expect(numToHex(1, true, -1, false, '')).toEqual('1');
    expect(numToHex(1, true, -1, false, '0x')).toEqual('1');
    expect(numToHex(1, true, -1, true, '')).toEqual('1');
    expect(numToHex(1, true, -1, true, '0x')).toEqual('0x1');
    expect(numToHex(1, true, 0, false, '')).toEqual('01');
    expect(numToHex(1, true, 0, false, '0x')).toEqual('01');
    expect(numToHex(1, true, 0, true, '')).toEqual('01');
    expect(numToHex(1, true, 0, true, '0x')).toEqual('0x01');
    expect(numToHex(1, true, 1, false, '')).toEqual('01');
    expect(numToHex(1, true, 1, false, '0x')).toEqual('01');
    expect(numToHex(1, true, 1, true, '')).toEqual('01');
    expect(numToHex(1, true, 1, true, '0x')).toEqual('0x01');
    expect(numToHex(1, true, 2, false, '')).toEqual('0001');
    expect(numToHex(1, true, 2, false, '0x')).toEqual('0001');
    expect(numToHex(1, true, 2, true, '')).toEqual('0001');
    expect(numToHex(1, true, 2, true, '0x')).toEqual('0x0001');
    expect(numToHex(1, true, 4, false, '')).toEqual('00000001');
    expect(numToHex(1, true, 4, false, '0x')).toEqual('00000001');
    expect(numToHex(1, true, 4, true, '')).toEqual('00000001');
    expect(numToHex(1, true, 4, true, '0x')).toEqual('0x00000001');
    expect(numToHex(1, true, 8, false, '')).toEqual('0000000000000001');
    expect(numToHex(1, true, 8, false, '0x')).toEqual('0000000000000001');
    expect(numToHex(1, true, 8, true, '')).toEqual('0000000000000001');
    expect(numToHex(1, true, 8, true, '0x')).toEqual('0x0000000000000001');
    expect(numToHex(-1, false, -1, false, '')).toEqual('-1');
    expect(numToHex(-1, false, -1, false, '0x')).toEqual('-1');
    expect(numToHex(-1, false, -1, true, '')).toEqual('-1');
    expect(numToHex(-1, false, -1, true, '0x')).toEqual('-0x1');
    expect(numToHex(-1, false, 0, false, '')).toEqual('-01');
    expect(numToHex(-1, false, 0, false, '0x')).toEqual('-01');
    expect(numToHex(-1, false, 0, true, '')).toEqual('-01');
    expect(numToHex(-1, false, 0, true, '0x')).toEqual('-0x01');
    expect(numToHex(-1, false, 1, false, '')).toEqual('-01');
    expect(numToHex(-1, false, 1, false, '0x')).toEqual('-01');
    expect(numToHex(-1, false, 1, true, '')).toEqual('-01');
    expect(numToHex(-1, false, 1, true, '0x')).toEqual('-0x01');
    expect(numToHex(-1, false, 2, false, '')).toEqual('-0001');
    expect(numToHex(-1, false, 2, false, '0x')).toEqual('-0001');
    expect(numToHex(-1, false, 2, true, '')).toEqual('-0001');
    expect(numToHex(-1, false, 2, true, '0x')).toEqual('-0x0001');
    expect(numToHex(-1, false, 4, false, '')).toEqual('-00000001');
    expect(numToHex(-1, false, 4, false, '0x')).toEqual('-00000001');
    expect(numToHex(-1, false, 4, true, '')).toEqual('-00000001');
    expect(numToHex(-1, false, 4, true, '0x')).toEqual('-0x00000001');
    expect(numToHex(-1, false, 8, false, '')).toEqual('-0000000000000001');
    expect(numToHex(-1, false, 8, false, '0x')).toEqual('-0000000000000001');
    expect(numToHex(-1, false, 8, true, '')).toEqual('-0000000000000001');
    expect(numToHex(-1, false, 8, true, '0x')).toEqual('-0x0000000000000001');
    expect(numToHex(-1, true, -1, false, '')).toEqual('-1');
    expect(numToHex(-1, true, -1, false, '0x')).toEqual('-1');
    expect(numToHex(-1, true, -1, true, '')).toEqual('-1');
    expect(numToHex(-1, true, -1, true, '0x')).toEqual('-0x1');
    expect(numToHex(-1, true, 0, false, '')).toEqual('-01');
    expect(numToHex(-1, true, 0, false, '0x')).toEqual('-01');
    expect(numToHex(-1, true, 0, true, '')).toEqual('-01');
    expect(numToHex(-1, true, 0, true, '0x')).toEqual('-0x01');
    expect(numToHex(-1, true, 1, false, '')).toEqual('-01');
    expect(numToHex(-1, true, 1, false, '0x')).toEqual('-01');
    expect(numToHex(-1, true, 1, true, '')).toEqual('-01');
    expect(numToHex(-1, true, 1, true, '0x')).toEqual('-0x01');
    expect(numToHex(-1, true, 2, false, '')).toEqual('-0001');
    expect(numToHex(-1, true, 2, false, '0x')).toEqual('-0001');
    expect(numToHex(-1, true, 2, true, '')).toEqual('-0001');
    expect(numToHex(-1, true, 2, true, '0x')).toEqual('-0x0001');
    expect(numToHex(-1, true, 4, false, '')).toEqual('-00000001');
    expect(numToHex(-1, true, 4, false, '0x')).toEqual('-00000001');
    expect(numToHex(-1, true, 4, true, '')).toEqual('-00000001');
    expect(numToHex(-1, true, 4, true, '0x')).toEqual('-0x00000001');
    expect(numToHex(-1, true, 8, false, '')).toEqual('-0000000000000001');
    expect(numToHex(-1, true, 8, false, '0x')).toEqual('-0000000000000001');
    expect(numToHex(-1, true, 8, true, '')).toEqual('-0000000000000001');
    expect(numToHex(-1, true, 8, true, '0x')).toEqual('-0x0000000000000001');
    expect(numToHex(255, false, -1, false, '')).toEqual('ff');
    expect(numToHex(255, false, -1, false, '0x')).toEqual('ff');
    expect(numToHex(255, false, -1, true, '')).toEqual('ff');
    expect(numToHex(255, false, -1, true, '0x')).toEqual('0xff');
    expect(numToHex(255, false, 0, false, '')).toEqual('ff');
    expect(numToHex(255, false, 0, false, '0x')).toEqual('ff');
    expect(numToHex(255, false, 0, true, '')).toEqual('ff');
    expect(numToHex(255, false, 0, true, '0x')).toEqual('0xff');
    expect(numToHex(255, false, 1, false, '')).toEqual('ff');
    expect(numToHex(255, false, 1, false, '0x')).toEqual('ff');
    expect(numToHex(255, false, 1, true, '')).toEqual('ff');
    expect(numToHex(255, false, 1, true, '0x')).toEqual('0xff');
    expect(numToHex(255, false, 2, false, '')).toEqual('00ff');
    expect(numToHex(255, false, 2, false, '0x')).toEqual('00ff');
    expect(numToHex(255, false, 2, true, '')).toEqual('00ff');
    expect(numToHex(255, false, 2, true, '0x')).toEqual('0x00ff');
    expect(numToHex(255, false, 4, false, '')).toEqual('000000ff');
    expect(numToHex(255, false, 4, false, '0x')).toEqual('000000ff');
    expect(numToHex(255, false, 4, true, '')).toEqual('000000ff');
    expect(numToHex(255, false, 4, true, '0x')).toEqual('0x000000ff');
    expect(numToHex(255, false, 8, false, '')).toEqual('00000000000000ff');
    expect(numToHex(255, false, 8, false, '0x')).toEqual('00000000000000ff');
    expect(numToHex(255, false, 8, true, '')).toEqual('00000000000000ff');
    expect(numToHex(255, false, 8, true, '0x')).toEqual('0x00000000000000ff');
    expect(numToHex(255, true, -1, false, '')).toEqual('FF');
    expect(numToHex(255, true, -1, false, '0x')).toEqual('FF');
    expect(numToHex(255, true, -1, true, '')).toEqual('FF');
    expect(numToHex(255, true, -1, true, '0x')).toEqual('0xFF');
    expect(numToHex(255, true, 0, false, '')).toEqual('FF');
    expect(numToHex(255, true, 0, false, '0x')).toEqual('FF');
    expect(numToHex(255, true, 0, true, '')).toEqual('FF');
    expect(numToHex(255, true, 0, true, '0x')).toEqual('0xFF');
    expect(numToHex(255, true, 1, false, '')).toEqual('FF');
    expect(numToHex(255, true, 1, false, '0x')).toEqual('FF');
    expect(numToHex(255, true, 1, true, '')).toEqual('FF');
    expect(numToHex(255, true, 1, true, '0x')).toEqual('0xFF');
    expect(numToHex(255, true, 2, false, '')).toEqual('00FF');
    expect(numToHex(255, true, 2, false, '0x')).toEqual('00FF');
    expect(numToHex(255, true, 2, true, '')).toEqual('00FF');
    expect(numToHex(255, true, 2, true, '0x')).toEqual('0x00FF');
    expect(numToHex(255, true, 4, false, '')).toEqual('000000FF');
    expect(numToHex(255, true, 4, false, '0x')).toEqual('000000FF');
    expect(numToHex(255, true, 4, true, '')).toEqual('000000FF');
    expect(numToHex(255, true, 4, true, '0x')).toEqual('0x000000FF');
    expect(numToHex(255, true, 8, false, '')).toEqual('00000000000000FF');
    expect(numToHex(255, true, 8, false, '0x')).toEqual('00000000000000FF');
    expect(numToHex(255, true, 8, true, '')).toEqual('00000000000000FF');
    expect(numToHex(255, true, 8, true, '0x')).toEqual('0x00000000000000FF');
    expect(numToHex(-255, false, -1, false, '')).toEqual('-ff');
    expect(numToHex(-255, false, -1, false, '0x')).toEqual('-ff');
    expect(numToHex(-255, false, -1, true, '')).toEqual('-ff');
    expect(numToHex(-255, false, -1, true, '0x')).toEqual('-0xff');
    expect(numToHex(-255, false, 0, false, '')).toEqual('-ff');
    expect(numToHex(-255, false, 0, false, '0x')).toEqual('-ff');
    expect(numToHex(-255, false, 0, true, '')).toEqual('-ff');
    expect(numToHex(-255, false, 0, true, '0x')).toEqual('-0xff');
    expect(numToHex(-255, false, 1, false, '')).toEqual('-ff');
    expect(numToHex(-255, false, 1, false, '0x')).toEqual('-ff');
    expect(numToHex(-255, false, 1, true, '')).toEqual('-ff');
    expect(numToHex(-255, false, 1, true, '0x')).toEqual('-0xff');
    expect(numToHex(-255, false, 2, false, '')).toEqual('-00ff');
    expect(numToHex(-255, false, 2, false, '0x')).toEqual('-00ff');
    expect(numToHex(-255, false, 2, true, '')).toEqual('-00ff');
    expect(numToHex(-255, false, 2, true, '0x')).toEqual('-0x00ff');
    expect(numToHex(-255, false, 4, false, '')).toEqual('-000000ff');
    expect(numToHex(-255, false, 4, false, '0x')).toEqual('-000000ff');
    expect(numToHex(-255, false, 4, true, '')).toEqual('-000000ff');
    expect(numToHex(-255, false, 4, true, '0x')).toEqual('-0x000000ff');
    expect(numToHex(-255, false, 8, false, '')).toEqual('-00000000000000ff');
    expect(numToHex(-255, false, 8, false, '0x')).toEqual('-00000000000000ff');
    expect(numToHex(-255, false, 8, true, '')).toEqual('-00000000000000ff');
    expect(numToHex(-255, false, 8, true, '0x')).toEqual('-0x00000000000000ff');
    expect(numToHex(-255, true, -1, false, '')).toEqual('-FF');
    expect(numToHex(-255, true, -1, false, '0x')).toEqual('-FF');
    expect(numToHex(-255, true, -1, true, '')).toEqual('-FF');
    expect(numToHex(-255, true, -1, true, '0x')).toEqual('-0xFF');
    expect(numToHex(-255, true, 0, false, '')).toEqual('-FF');
    expect(numToHex(-255, true, 0, false, '0x')).toEqual('-FF');
    expect(numToHex(-255, true, 0, true, '')).toEqual('-FF');
    expect(numToHex(-255, true, 0, true, '0x')).toEqual('-0xFF');
    expect(numToHex(-255, true, 1, false, '')).toEqual('-FF');
    expect(numToHex(-255, true, 1, false, '0x')).toEqual('-FF');
    expect(numToHex(-255, true, 1, true, '')).toEqual('-FF');
    expect(numToHex(-255, true, 1, true, '0x')).toEqual('-0xFF');
    expect(numToHex(-255, true, 2, false, '')).toEqual('-00FF');
    expect(numToHex(-255, true, 2, false, '0x')).toEqual('-00FF');
    expect(numToHex(-255, true, 2, true, '')).toEqual('-00FF');
    expect(numToHex(-255, true, 2, true, '0x')).toEqual('-0x00FF');
    expect(numToHex(-255, true, 4, false, '')).toEqual('-000000FF');
    expect(numToHex(-255, true, 4, false, '0x')).toEqual('-000000FF');
    expect(numToHex(-255, true, 4, true, '')).toEqual('-000000FF');
    expect(numToHex(-255, true, 4, true, '0x')).toEqual('-0x000000FF');
    expect(numToHex(-255, true, 8, false, '')).toEqual('-00000000000000FF');
    expect(numToHex(-255, true, 8, false, '0x')).toEqual('-00000000000000FF');
    expect(numToHex(-255, true, 8, true, '')).toEqual('-00000000000000FF');
    expect(numToHex(-255, true, 8, true, '0x')).toEqual('-0x00000000000000FF');
    expect(numToHex(256, false, -1, false, '')).toEqual('100');
    expect(numToHex(256, false, -1, false, '0x')).toEqual('100');
    expect(numToHex(256, false, -1, true, '')).toEqual('100');
    expect(numToHex(256, false, -1, true, '0x')).toEqual('0x100');
    expect(numToHex(256, false, 0, false, '')).toEqual('0100');
    expect(numToHex(256, false, 0, false, '0x')).toEqual('0100');
    expect(numToHex(256, false, 0, true, '')).toEqual('0100');
    expect(numToHex(256, false, 0, true, '0x')).toEqual('0x0100');
    expect(numToHex(256, false, 1, false, '')).toEqual('100');
    expect(numToHex(256, false, 1, false, '0x')).toEqual('100');
    expect(numToHex(256, false, 1, true, '')).toEqual('100');
    expect(numToHex(256, false, 1, true, '0x')).toEqual('0x100');
    expect(numToHex(256, false, 2, false, '')).toEqual('0100');
    expect(numToHex(256, false, 2, false, '0x')).toEqual('0100');
    expect(numToHex(256, false, 2, true, '')).toEqual('0100');
    expect(numToHex(256, false, 2, true, '0x')).toEqual('0x0100');
    expect(numToHex(256, false, 4, false, '')).toEqual('00000100');
    expect(numToHex(256, false, 4, false, '0x')).toEqual('00000100');
    expect(numToHex(256, false, 4, true, '')).toEqual('00000100');
    expect(numToHex(256, false, 4, true, '0x')).toEqual('0x00000100');
    expect(numToHex(256, false, 8, false, '')).toEqual('0000000000000100');
    expect(numToHex(256, false, 8, false, '0x')).toEqual('0000000000000100');
    expect(numToHex(256, false, 8, true, '')).toEqual('0000000000000100');
    expect(numToHex(256, false, 8, true, '0x')).toEqual('0x0000000000000100');
    expect(numToHex(256, true, -1, false, '')).toEqual('100');
    expect(numToHex(256, true, -1, false, '0x')).toEqual('100');
    expect(numToHex(256, true, -1, true, '')).toEqual('100');
    expect(numToHex(256, true, -1, true, '0x')).toEqual('0x100');
    expect(numToHex(256, true, 0, false, '')).toEqual('0100');
    expect(numToHex(256, true, 0, false, '0x')).toEqual('0100');
    expect(numToHex(256, true, 0, true, '')).toEqual('0100');
    expect(numToHex(256, true, 0, true, '0x')).toEqual('0x0100');
    expect(numToHex(256, true, 1, false, '')).toEqual('100');
    expect(numToHex(256, true, 1, false, '0x')).toEqual('100');
    expect(numToHex(256, true, 1, true, '')).toEqual('100');
    expect(numToHex(256, true, 1, true, '0x')).toEqual('0x100');
    expect(numToHex(256, true, 2, false, '')).toEqual('0100');
    expect(numToHex(256, true, 2, false, '0x')).toEqual('0100');
    expect(numToHex(256, true, 2, true, '')).toEqual('0100');
    expect(numToHex(256, true, 2, true, '0x')).toEqual('0x0100');
    expect(numToHex(256, true, 4, false, '')).toEqual('00000100');
    expect(numToHex(256, true, 4, false, '0x')).toEqual('00000100');
    expect(numToHex(256, true, 4, true, '')).toEqual('00000100');
    expect(numToHex(256, true, 4, true, '0x')).toEqual('0x00000100');
    expect(numToHex(256, true, 8, false, '')).toEqual('0000000000000100');
    expect(numToHex(256, true, 8, false, '0x')).toEqual('0000000000000100');
    expect(numToHex(256, true, 8, true, '')).toEqual('0000000000000100');
    expect(numToHex(256, true, 8, true, '0x')).toEqual('0x0000000000000100');
    expect(numToHex(-256, false, -1, false, '')).toEqual('-100');
    expect(numToHex(-256, false, -1, false, '0x')).toEqual('-100');
    expect(numToHex(-256, false, -1, true, '')).toEqual('-100');
    expect(numToHex(-256, false, -1, true, '0x')).toEqual('-0x100');
    expect(numToHex(-256, false, 0, false, '')).toEqual('-0100');
    expect(numToHex(-256, false, 0, false, '0x')).toEqual('-0100');
    expect(numToHex(-256, false, 0, true, '')).toEqual('-0100');
    expect(numToHex(-256, false, 0, true, '0x')).toEqual('-0x0100');
    expect(numToHex(-256, false, 1, false, '')).toEqual('-100');
    expect(numToHex(-256, false, 1, false, '0x')).toEqual('-100');
    expect(numToHex(-256, false, 1, true, '')).toEqual('-100');
    expect(numToHex(-256, false, 1, true, '0x')).toEqual('-0x100');
    expect(numToHex(-256, false, 2, false, '')).toEqual('-0100');
    expect(numToHex(-256, false, 2, false, '0x')).toEqual('-0100');
    expect(numToHex(-256, false, 2, true, '')).toEqual('-0100');
    expect(numToHex(-256, false, 2, true, '0x')).toEqual('-0x0100');
    expect(numToHex(-256, false, 4, false, '')).toEqual('-00000100');
    expect(numToHex(-256, false, 4, false, '0x')).toEqual('-00000100');
    expect(numToHex(-256, false, 4, true, '')).toEqual('-00000100');
    expect(numToHex(-256, false, 4, true, '0x')).toEqual('-0x00000100');
    expect(numToHex(-256, false, 8, false, '')).toEqual('-0000000000000100');
    expect(numToHex(-256, false, 8, false, '0x')).toEqual('-0000000000000100');
    expect(numToHex(-256, false, 8, true, '')).toEqual('-0000000000000100');
    expect(numToHex(-256, false, 8, true, '0x')).toEqual('-0x0000000000000100');
    expect(numToHex(-256, true, -1, false, '')).toEqual('-100');
    expect(numToHex(-256, true, -1, false, '0x')).toEqual('-100');
    expect(numToHex(-256, true, -1, true, '')).toEqual('-100');
    expect(numToHex(-256, true, -1, true, '0x')).toEqual('-0x100');
    expect(numToHex(-256, true, 0, false, '')).toEqual('-0100');
    expect(numToHex(-256, true, 0, false, '0x')).toEqual('-0100');
    expect(numToHex(-256, true, 0, true, '')).toEqual('-0100');
    expect(numToHex(-256, true, 0, true, '0x')).toEqual('-0x0100');
    expect(numToHex(-256, true, 1, false, '')).toEqual('-100');
    expect(numToHex(-256, true, 1, false, '0x')).toEqual('-100');
    expect(numToHex(-256, true, 1, true, '')).toEqual('-100');
    expect(numToHex(-256, true, 1, true, '0x')).toEqual('-0x100');
    expect(numToHex(-256, true, 2, false, '')).toEqual('-0100');
    expect(numToHex(-256, true, 2, false, '0x')).toEqual('-0100');
    expect(numToHex(-256, true, 2, true, '')).toEqual('-0100');
    expect(numToHex(-256, true, 2, true, '0x')).toEqual('-0x0100');
    expect(numToHex(-256, true, 4, false, '')).toEqual('-00000100');
    expect(numToHex(-256, true, 4, false, '0x')).toEqual('-00000100');
    expect(numToHex(-256, true, 4, true, '')).toEqual('-00000100');
    expect(numToHex(-256, true, 4, true, '0x')).toEqual('-0x00000100');
    expect(numToHex(-256, true, 8, false, '')).toEqual('-0000000000000100');
    expect(numToHex(-256, true, 8, false, '0x')).toEqual('-0000000000000100');
    expect(numToHex(-256, true, 8, true, '')).toEqual('-0000000000000100');
    expect(numToHex(-256, true, 8, true, '0x')).toEqual('-0x0000000000000100');
    expect(numToHex(65535, false, -1, false, '')).toEqual('ffff');
    expect(numToHex(65535, false, -1, false, '0x')).toEqual('ffff');
    expect(numToHex(65535, false, -1, true, '')).toEqual('ffff');
    expect(numToHex(65535, false, -1, true, '0x')).toEqual('0xffff');
    expect(numToHex(65535, false, 0, false, '')).toEqual('ffff');
    expect(numToHex(65535, false, 0, false, '0x')).toEqual('ffff');
    expect(numToHex(65535, false, 0, true, '')).toEqual('ffff');
    expect(numToHex(65535, false, 0, true, '0x')).toEqual('0xffff');
    expect(numToHex(65535, false, 1, false, '')).toEqual('ffff');
    expect(numToHex(65535, false, 1, false, '0x')).toEqual('ffff');
    expect(numToHex(65535, false, 1, true, '')).toEqual('ffff');
    expect(numToHex(65535, false, 1, true, '0x')).toEqual('0xffff');
    expect(numToHex(65535, false, 2, false, '')).toEqual('ffff');
    expect(numToHex(65535, false, 2, false, '0x')).toEqual('ffff');
    expect(numToHex(65535, false, 2, true, '')).toEqual('ffff');
    expect(numToHex(65535, false, 2, true, '0x')).toEqual('0xffff');
    expect(numToHex(65535, false, 4, false, '')).toEqual('0000ffff');
    expect(numToHex(65535, false, 4, false, '0x')).toEqual('0000ffff');
    expect(numToHex(65535, false, 4, true, '')).toEqual('0000ffff');
    expect(numToHex(65535, false, 4, true, '0x')).toEqual('0x0000ffff');
    expect(numToHex(65535, false, 8, false, '')).toEqual('000000000000ffff');
    expect(numToHex(65535, false, 8, false, '0x')).toEqual('000000000000ffff');
    expect(numToHex(65535, false, 8, true, '')).toEqual('000000000000ffff');
    expect(numToHex(65535, false, 8, true, '0x')).toEqual('0x000000000000ffff');
    expect(numToHex(65535, true, -1, false, '')).toEqual('FFFF');
    expect(numToHex(65535, true, -1, false, '0x')).toEqual('FFFF');
    expect(numToHex(65535, true, -1, true, '')).toEqual('FFFF');
    expect(numToHex(65535, true, -1, true, '0x')).toEqual('0xFFFF');
    expect(numToHex(65535, true, 0, false, '')).toEqual('FFFF');
    expect(numToHex(65535, true, 0, false, '0x')).toEqual('FFFF');
    expect(numToHex(65535, true, 0, true, '')).toEqual('FFFF');
    expect(numToHex(65535, true, 0, true, '0x')).toEqual('0xFFFF');
    expect(numToHex(65535, true, 1, false, '')).toEqual('FFFF');
    expect(numToHex(65535, true, 1, false, '0x')).toEqual('FFFF');
    expect(numToHex(65535, true, 1, true, '')).toEqual('FFFF');
    expect(numToHex(65535, true, 1, true, '0x')).toEqual('0xFFFF');
    expect(numToHex(65535, true, 2, false, '')).toEqual('FFFF');
    expect(numToHex(65535, true, 2, false, '0x')).toEqual('FFFF');
    expect(numToHex(65535, true, 2, true, '')).toEqual('FFFF');
    expect(numToHex(65535, true, 2, true, '0x')).toEqual('0xFFFF');
    expect(numToHex(65535, true, 4, false, '')).toEqual('0000FFFF');
    expect(numToHex(65535, true, 4, false, '0x')).toEqual('0000FFFF');
    expect(numToHex(65535, true, 4, true, '')).toEqual('0000FFFF');
    expect(numToHex(65535, true, 4, true, '0x')).toEqual('0x0000FFFF');
    expect(numToHex(65535, true, 8, false, '')).toEqual('000000000000FFFF');
    expect(numToHex(65535, true, 8, false, '0x')).toEqual('000000000000FFFF');
    expect(numToHex(65535, true, 8, true, '')).toEqual('000000000000FFFF');
    expect(numToHex(65535, true, 8, true, '0x')).toEqual('0x000000000000FFFF');
    expect(numToHex(-65535, false, -1, false, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, -1, false, '0x')).toEqual('-ffff');
    expect(numToHex(-65535, false, -1, true, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, -1, true, '0x')).toEqual('-0xffff');
    expect(numToHex(-65535, false, 0, false, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, 0, false, '0x')).toEqual('-ffff');
    expect(numToHex(-65535, false, 0, true, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, 0, true, '0x')).toEqual('-0xffff');
    expect(numToHex(-65535, false, 1, false, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, 1, false, '0x')).toEqual('-ffff');
    expect(numToHex(-65535, false, 1, true, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, 1, true, '0x')).toEqual('-0xffff');
    expect(numToHex(-65535, false, 2, false, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, 2, false, '0x')).toEqual('-ffff');
    expect(numToHex(-65535, false, 2, true, '')).toEqual('-ffff');
    expect(numToHex(-65535, false, 2, true, '0x')).toEqual('-0xffff');
    expect(numToHex(-65535, false, 4, false, '')).toEqual('-0000ffff');
    expect(numToHex(-65535, false, 4, false, '0x')).toEqual('-0000ffff');
    expect(numToHex(-65535, false, 4, true, '')).toEqual('-0000ffff');
    expect(numToHex(-65535, false, 4, true, '0x')).toEqual('-0x0000ffff');
    expect(numToHex(-65535, false, 8, false, '')).toEqual('-000000000000ffff');
    expect(numToHex(-65535, false, 8, false, '0x')).toEqual('-000000000000ffff');
    expect(numToHex(-65535, false, 8, true, '')).toEqual('-000000000000ffff');
    expect(numToHex(-65535, false, 8, true, '0x')).toEqual('-0x000000000000ffff');
    expect(numToHex(-65535, true, -1, false, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, -1, false, '0x')).toEqual('-FFFF');
    expect(numToHex(-65535, true, -1, true, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, -1, true, '0x')).toEqual('-0xFFFF');
    expect(numToHex(-65535, true, 0, false, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 0, false, '0x')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 0, true, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 0, true, '0x')).toEqual('-0xFFFF');
    expect(numToHex(-65535, true, 1, false, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 1, false, '0x')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 1, true, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 1, true, '0x')).toEqual('-0xFFFF');
    expect(numToHex(-65535, true, 2, false, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 2, false, '0x')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 2, true, '')).toEqual('-FFFF');
    expect(numToHex(-65535, true, 2, true, '0x')).toEqual('-0xFFFF');
    expect(numToHex(-65535, true, 4, false, '')).toEqual('-0000FFFF');
    expect(numToHex(-65535, true, 4, false, '0x')).toEqual('-0000FFFF');
    expect(numToHex(-65535, true, 4, true, '')).toEqual('-0000FFFF');
    expect(numToHex(-65535, true, 4, true, '0x')).toEqual('-0x0000FFFF');
    expect(numToHex(-65535, true, 8, false, '')).toEqual('-000000000000FFFF');
    expect(numToHex(-65535, true, 8, false, '0x')).toEqual('-000000000000FFFF');
    expect(numToHex(-65535, true, 8, true, '')).toEqual('-000000000000FFFF');
    expect(numToHex(-65535, true, 8, true, '0x')).toEqual('-0x000000000000FFFF');
    expect(numToHex(65536, false, -1, false, '')).toEqual('10000');
    expect(numToHex(65536, false, -1, false, '0x')).toEqual('10000');
    expect(numToHex(65536, false, -1, true, '')).toEqual('10000');
    expect(numToHex(65536, false, -1, true, '0x')).toEqual('0x10000');
    expect(numToHex(65536, false, 0, false, '')).toEqual('010000');
    expect(numToHex(65536, false, 0, false, '0x')).toEqual('010000');
    expect(numToHex(65536, false, 0, true, '')).toEqual('010000');
    expect(numToHex(65536, false, 0, true, '0x')).toEqual('0x010000');
    expect(numToHex(65536, false, 1, false, '')).toEqual('10000');
    expect(numToHex(65536, false, 1, false, '0x')).toEqual('10000');
    expect(numToHex(65536, false, 1, true, '')).toEqual('10000');
    expect(numToHex(65536, false, 1, true, '0x')).toEqual('0x10000');
    expect(numToHex(65536, false, 2, false, '')).toEqual('10000');
    expect(numToHex(65536, false, 2, false, '0x')).toEqual('10000');
    expect(numToHex(65536, false, 2, true, '')).toEqual('10000');
    expect(numToHex(65536, false, 2, true, '0x')).toEqual('0x10000');
    expect(numToHex(65536, false, 4, false, '')).toEqual('00010000');
    expect(numToHex(65536, false, 4, false, '0x')).toEqual('00010000');
    expect(numToHex(65536, false, 4, true, '')).toEqual('00010000');
    expect(numToHex(65536, false, 4, true, '0x')).toEqual('0x00010000');
    expect(numToHex(65536, false, 8, false, '')).toEqual('0000000000010000');
    expect(numToHex(65536, false, 8, false, '0x')).toEqual('0000000000010000');
    expect(numToHex(65536, false, 8, true, '')).toEqual('0000000000010000');
    expect(numToHex(65536, false, 8, true, '0x')).toEqual('0x0000000000010000');
    expect(numToHex(65536, true, -1, false, '')).toEqual('10000');
    expect(numToHex(65536, true, -1, false, '0x')).toEqual('10000');
    expect(numToHex(65536, true, -1, true, '')).toEqual('10000');
    expect(numToHex(65536, true, -1, true, '0x')).toEqual('0x10000');
    expect(numToHex(65536, true, 0, false, '')).toEqual('010000');
    expect(numToHex(65536, true, 0, false, '0x')).toEqual('010000');
    expect(numToHex(65536, true, 0, true, '')).toEqual('010000');
    expect(numToHex(65536, true, 0, true, '0x')).toEqual('0x010000');
    expect(numToHex(65536, true, 1, false, '')).toEqual('10000');
    expect(numToHex(65536, true, 1, false, '0x')).toEqual('10000');
    expect(numToHex(65536, true, 1, true, '')).toEqual('10000');
    expect(numToHex(65536, true, 1, true, '0x')).toEqual('0x10000');
    expect(numToHex(65536, true, 2, false, '')).toEqual('10000');
    expect(numToHex(65536, true, 2, false, '0x')).toEqual('10000');
    expect(numToHex(65536, true, 2, true, '')).toEqual('10000');
    expect(numToHex(65536, true, 2, true, '0x')).toEqual('0x10000');
    expect(numToHex(65536, true, 4, false, '')).toEqual('00010000');
    expect(numToHex(65536, true, 4, false, '0x')).toEqual('00010000');
    expect(numToHex(65536, true, 4, true, '')).toEqual('00010000');
    expect(numToHex(65536, true, 4, true, '0x')).toEqual('0x00010000');
    expect(numToHex(65536, true, 8, false, '')).toEqual('0000000000010000');
    expect(numToHex(65536, true, 8, false, '0x')).toEqual('0000000000010000');
    expect(numToHex(65536, true, 8, true, '')).toEqual('0000000000010000');
    expect(numToHex(65536, true, 8, true, '0x')).toEqual('0x0000000000010000');
    expect(numToHex(-65536, false, -1, false, '')).toEqual('-10000');
    expect(numToHex(-65536, false, -1, false, '0x')).toEqual('-10000');
    expect(numToHex(-65536, false, -1, true, '')).toEqual('-10000');
    expect(numToHex(-65536, false, -1, true, '0x')).toEqual('-0x10000');
    expect(numToHex(-65536, false, 0, false, '')).toEqual('-010000');
    expect(numToHex(-65536, false, 0, false, '0x')).toEqual('-010000');
    expect(numToHex(-65536, false, 0, true, '')).toEqual('-010000');
    expect(numToHex(-65536, false, 0, true, '0x')).toEqual('-0x010000');
    expect(numToHex(-65536, false, 1, false, '')).toEqual('-10000');
    expect(numToHex(-65536, false, 1, false, '0x')).toEqual('-10000');
    expect(numToHex(-65536, false, 1, true, '')).toEqual('-10000');
    expect(numToHex(-65536, false, 1, true, '0x')).toEqual('-0x10000');
    expect(numToHex(-65536, false, 2, false, '')).toEqual('-10000');
    expect(numToHex(-65536, false, 2, false, '0x')).toEqual('-10000');
    expect(numToHex(-65536, false, 2, true, '')).toEqual('-10000');
    expect(numToHex(-65536, false, 2, true, '0x')).toEqual('-0x10000');
    expect(numToHex(-65536, false, 4, false, '')).toEqual('-00010000');
    expect(numToHex(-65536, false, 4, false, '0x')).toEqual('-00010000');
    expect(numToHex(-65536, false, 4, true, '')).toEqual('-00010000');
    expect(numToHex(-65536, false, 4, true, '0x')).toEqual('-0x00010000');
    expect(numToHex(-65536, false, 8, false, '')).toEqual('-0000000000010000');
    expect(numToHex(-65536, false, 8, false, '0x')).toEqual('-0000000000010000');
    expect(numToHex(-65536, false, 8, true, '')).toEqual('-0000000000010000');
    expect(numToHex(-65536, false, 8, true, '0x')).toEqual('-0x0000000000010000');
    expect(numToHex(-65536, true, -1, false, '')).toEqual('-10000');
    expect(numToHex(-65536, true, -1, false, '0x')).toEqual('-10000');
    expect(numToHex(-65536, true, -1, true, '')).toEqual('-10000');
    expect(numToHex(-65536, true, -1, true, '0x')).toEqual('-0x10000');
    expect(numToHex(-65536, true, 0, false, '')).toEqual('-010000');
    expect(numToHex(-65536, true, 0, false, '0x')).toEqual('-010000');
    expect(numToHex(-65536, true, 0, true, '')).toEqual('-010000');
    expect(numToHex(-65536, true, 0, true, '0x')).toEqual('-0x010000');
    expect(numToHex(-65536, true, 1, false, '')).toEqual('-10000');
    expect(numToHex(-65536, true, 1, false, '0x')).toEqual('-10000');
    expect(numToHex(-65536, true, 1, true, '')).toEqual('-10000');
    expect(numToHex(-65536, true, 1, true, '0x')).toEqual('-0x10000');
    expect(numToHex(-65536, true, 2, false, '')).toEqual('-10000');
    expect(numToHex(-65536, true, 2, false, '0x')).toEqual('-10000');
    expect(numToHex(-65536, true, 2, true, '')).toEqual('-10000');
    expect(numToHex(-65536, true, 2, true, '0x')).toEqual('-0x10000');
    expect(numToHex(-65536, true, 4, false, '')).toEqual('-00010000');
    expect(numToHex(-65536, true, 4, false, '0x')).toEqual('-00010000');
    expect(numToHex(-65536, true, 4, true, '')).toEqual('-00010000');
    expect(numToHex(-65536, true, 4, true, '0x')).toEqual('-0x00010000');
    expect(numToHex(-65536, true, 8, false, '')).toEqual('-0000000000010000');
    expect(numToHex(-65536, true, 8, false, '0x')).toEqual('-0000000000010000');
    expect(numToHex(-65536, true, 8, true, '')).toEqual('-0000000000010000');
    expect(numToHex(-65536, true, 8, true, '0x')).toEqual('-0x0000000000010000');
    expect(numToHex(3735928559, false, -1, false, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, -1, false, '0x')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, -1, true, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, -1, true, '0x')).toEqual('0xdeadbeef');
    expect(numToHex(3735928559, false, 0, false, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 0, false, '0x')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 0, true, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 0, true, '0x')).toEqual('0xdeadbeef');
    expect(numToHex(3735928559, false, 1, false, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 1, false, '0x')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 1, true, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 1, true, '0x')).toEqual('0xdeadbeef');
    expect(numToHex(3735928559, false, 2, false, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 2, false, '0x')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 2, true, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 2, true, '0x')).toEqual('0xdeadbeef');
    expect(numToHex(3735928559, false, 4, false, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 4, false, '0x')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 4, true, '')).toEqual('deadbeef');
    expect(numToHex(3735928559, false, 4, true, '0x')).toEqual('0xdeadbeef');
    expect(numToHex(3735928559, false, 8, false, '')).toEqual('00000000deadbeef');
    expect(numToHex(3735928559, false, 8, false, '0x')).toEqual('00000000deadbeef');
    expect(numToHex(3735928559, false, 8, true, '')).toEqual('00000000deadbeef');
    expect(numToHex(3735928559, false, 8, true, '0x')).toEqual('0x00000000deadbeef');
    expect(numToHex(3735928559, true, -1, false, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, -1, false, '0x')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, -1, true, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, -1, true, '0x')).toEqual('0xDEADBEEF');
    expect(numToHex(3735928559, true, 0, false, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 0, false, '0x')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 0, true, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 0, true, '0x')).toEqual('0xDEADBEEF');
    expect(numToHex(3735928559, true, 1, false, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 1, false, '0x')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 1, true, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 1, true, '0x')).toEqual('0xDEADBEEF');
    expect(numToHex(3735928559, true, 2, false, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 2, false, '0x')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 2, true, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 2, true, '0x')).toEqual('0xDEADBEEF');
    expect(numToHex(3735928559, true, 4, false, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 4, false, '0x')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 4, true, '')).toEqual('DEADBEEF');
    expect(numToHex(3735928559, true, 4, true, '0x')).toEqual('0xDEADBEEF');
    expect(numToHex(3735928559, true, 8, false, '')).toEqual('00000000DEADBEEF');
    expect(numToHex(3735928559, true, 8, false, '0x')).toEqual('00000000DEADBEEF');
    expect(numToHex(3735928559, true, 8, true, '')).toEqual('00000000DEADBEEF');
    expect(numToHex(3735928559, true, 8, true, '0x')).toEqual('0x00000000DEADBEEF');
    expect(numToHex(-3735928559, false, -1, false, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, -1, false, '0x')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, -1, true, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, -1, true, '0x')).toEqual('-0xdeadbeef');
    expect(numToHex(-3735928559, false, 0, false, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 0, false, '0x')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 0, true, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 0, true, '0x')).toEqual('-0xdeadbeef');
    expect(numToHex(-3735928559, false, 1, false, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 1, false, '0x')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 1, true, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 1, true, '0x')).toEqual('-0xdeadbeef');
    expect(numToHex(-3735928559, false, 2, false, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 2, false, '0x')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 2, true, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 2, true, '0x')).toEqual('-0xdeadbeef');
    expect(numToHex(-3735928559, false, 4, false, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 4, false, '0x')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 4, true, '')).toEqual('-deadbeef');
    expect(numToHex(-3735928559, false, 4, true, '0x')).toEqual('-0xdeadbeef');
    expect(numToHex(-3735928559, false, 8, false, '')).toEqual('-00000000deadbeef');
    expect(numToHex(-3735928559, false, 8, false, '0x')).toEqual('-00000000deadbeef');
    expect(numToHex(-3735928559, false, 8, true, '')).toEqual('-00000000deadbeef');
    expect(numToHex(-3735928559, false, 8, true, '0x')).toEqual('-0x00000000deadbeef');
    expect(numToHex(-3735928559, true, -1, false, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, -1, false, '0x')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, -1, true, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, -1, true, '0x')).toEqual('-0xDEADBEEF');
    expect(numToHex(-3735928559, true, 0, false, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 0, false, '0x')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 0, true, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 0, true, '0x')).toEqual('-0xDEADBEEF');
    expect(numToHex(-3735928559, true, 1, false, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 1, false, '0x')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 1, true, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 1, true, '0x')).toEqual('-0xDEADBEEF');
    expect(numToHex(-3735928559, true, 2, false, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 2, false, '0x')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 2, true, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 2, true, '0x')).toEqual('-0xDEADBEEF');
    expect(numToHex(-3735928559, true, 4, false, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 4, false, '0x')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 4, true, '')).toEqual('-DEADBEEF');
    expect(numToHex(-3735928559, true, 4, true, '0x')).toEqual('-0xDEADBEEF');
    expect(numToHex(-3735928559, true, 8, false, '')).toEqual('-00000000DEADBEEF');
    expect(numToHex(-3735928559, true, 8, false, '0x')).toEqual('-00000000DEADBEEF');
    expect(numToHex(-3735928559, true, 8, true, '')).toEqual('-00000000DEADBEEF');
    expect(numToHex(-3735928559, true, 8, true, '0x')).toEqual('-0x00000000DEADBEEF');
    expect(numToHex(4294967296, false, -1, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, -1, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, false, -1, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, -1, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, false, 0, false, '')).toEqual('0100000000');
    expect(numToHex(4294967296, false, 0, false, '0x')).toEqual('0100000000');
    expect(numToHex(4294967296, false, 0, true, '')).toEqual('0100000000');
    expect(numToHex(4294967296, false, 0, true, '0x')).toEqual('0x0100000000');
    expect(numToHex(4294967296, false, 1, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, 1, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, false, 1, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, 1, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, false, 2, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, 2, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, false, 2, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, 2, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, false, 4, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, 4, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, false, 4, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, false, 4, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, false, 8, false, '')).toEqual('0000000100000000');
    expect(numToHex(4294967296, false, 8, false, '0x')).toEqual('0000000100000000');
    expect(numToHex(4294967296, false, 8, true, '')).toEqual('0000000100000000');
    expect(numToHex(4294967296, false, 8, true, '0x')).toEqual('0x0000000100000000');
    expect(numToHex(4294967296, true, -1, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, -1, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, true, -1, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, -1, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, true, 0, false, '')).toEqual('0100000000');
    expect(numToHex(4294967296, true, 0, false, '0x')).toEqual('0100000000');
    expect(numToHex(4294967296, true, 0, true, '')).toEqual('0100000000');
    expect(numToHex(4294967296, true, 0, true, '0x')).toEqual('0x0100000000');
    expect(numToHex(4294967296, true, 1, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, 1, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, true, 1, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, 1, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, true, 2, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, 2, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, true, 2, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, 2, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, true, 4, false, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, 4, false, '0x')).toEqual('100000000');
    expect(numToHex(4294967296, true, 4, true, '')).toEqual('100000000');
    expect(numToHex(4294967296, true, 4, true, '0x')).toEqual('0x100000000');
    expect(numToHex(4294967296, true, 8, false, '')).toEqual('0000000100000000');
    expect(numToHex(4294967296, true, 8, false, '0x')).toEqual('0000000100000000');
    expect(numToHex(4294967296, true, 8, true, '')).toEqual('0000000100000000');
    expect(numToHex(4294967296, true, 8, true, '0x')).toEqual('0x0000000100000000');
    expect(numToHex(-4294967296, false, -1, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, -1, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, -1, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, -1, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, false, 0, false, '')).toEqual('-0100000000');
    expect(numToHex(-4294967296, false, 0, false, '0x')).toEqual('-0100000000');
    expect(numToHex(-4294967296, false, 0, true, '')).toEqual('-0100000000');
    expect(numToHex(-4294967296, false, 0, true, '0x')).toEqual('-0x0100000000');
    expect(numToHex(-4294967296, false, 1, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 1, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 1, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 1, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, false, 2, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 2, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 2, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 2, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, false, 4, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 4, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 4, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, false, 4, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, false, 8, false, '')).toEqual('-0000000100000000');
    expect(numToHex(-4294967296, false, 8, false, '0x')).toEqual('-0000000100000000');
    expect(numToHex(-4294967296, false, 8, true, '')).toEqual('-0000000100000000');
    expect(numToHex(-4294967296, false, 8, true, '0x')).toEqual('-0x0000000100000000');
    expect(numToHex(-4294967296, true, -1, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, -1, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, -1, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, -1, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, true, 0, false, '')).toEqual('-0100000000');
    expect(numToHex(-4294967296, true, 0, false, '0x')).toEqual('-0100000000');
    expect(numToHex(-4294967296, true, 0, true, '')).toEqual('-0100000000');
    expect(numToHex(-4294967296, true, 0, true, '0x')).toEqual('-0x0100000000');
    expect(numToHex(-4294967296, true, 1, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 1, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 1, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 1, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, true, 2, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 2, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 2, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 2, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, true, 4, false, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 4, false, '0x')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 4, true, '')).toEqual('-100000000');
    expect(numToHex(-4294967296, true, 4, true, '0x')).toEqual('-0x100000000');
    expect(numToHex(-4294967296, true, 8, false, '')).toEqual('-0000000100000000');
    expect(numToHex(-4294967296, true, 8, false, '0x')).toEqual('-0000000100000000');
    expect(numToHex(-4294967296, true, 8, true, '')).toEqual('-0000000100000000');
    expect(numToHex(-4294967296, true, 8, true, '0x')).toEqual('-0x0000000100000000');
});

test('Test bigIntToHex()', () => {
    expect(bigIntToHex(0xDD00EE00AA00DD00BB00EE00EE00FFn, null, true, true, ' ')).toBe('DD 00 EE 00 AA 00 DD 00 BB 00 EE 00 EE 00 FF');
    expect(bigIntToHex(0xDD00EE00AA00DD00BB00EE00EE00FFn, null, false, false, ' ')).toBe('ff 00 ee 00 ee 00 bb 00 dd 00 aa 00 ee 00 dd');
});

test('Test hexToBigInt()', () => {
    expect(hexToBigInt('DD 00 EE 00 AA 00 DD 00 BB 00 EE 00 EE 00 FF', false, true)).toBe(0xDD00EE00AA00DD00BB00EE00EE00FFn);
    expect(hexToBigInt('ff 00 ee 00 ee 00 bb 00 dd 00 aa 00 ee 00 dd', false, false)).toBe(0xDD00EE00AA00DD00BB00EE00EE00FFn);
});
